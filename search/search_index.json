{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lan's Blog","text":"<p>\u4fdd\u5b58\u4e00\u4e9b\u8bba\u6587\u7b14\u8bb0\uff0c\u4e0a\u8bfe\u7b14\u8bb0\uff0c\u4ee5\u53ca\u4e00\u4e9b\u968f\u60f3\u3002</p> <pre><code>nav:\n  # \u4e3b\u9875\n  - Home: index.md \n  # \u5de5\u5177\u4f7f\u7528\n  - Cheat: \n    - section1/*\n  # \u7b14\u8bb0\n  - Notes:\n    - section2/*\n  # \u8bba\u6587\u9605\u8bfb\n  - Reviews:\n    - section3/*\n  # \u5176\u4ed6\n  - Others:\n    - section4/*\n</code></pre>"},{"location":"section1/docker/","title":"Docker\u5907\u5fd8","text":"<p>\u53c2\u8003</p> <p>https://summer25.net9.org/backend/docker/note/</p> <p>\u4ece\u955c\u50cf\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\u5e76\u4e14\u8fd0\u884c <pre><code>docker run\n</code></pre></p> <p>\u5e38\u7528\u7684\u9009\u9879:</p> <ul> <li><code>-d/--detach</code> \u540e\u53f0\u8fd0\u884c</li> <li><code>-e/--env &lt;variable&gt;=&lt;value&gt;</code> \u73af\u5883\u53d8\u91cf</li> <li><code>--rm</code> \u8fd0\u884c\u5b8c\u4ee5\u540e\u5220\u9664</li> <li><code>--name</code> \u547d\u540d</li> <li><code>-p/--publish &lt;host_port&gt;:&lt;container_port&gt;</code> \u7aef\u53e3\u6620\u5c04</li> <li><code>-it</code>, <code>--interactive --tty</code> \u4ea4\u4e92\u6a21\u5f0f\u5e76\u4e14\u5206\u914d\u4f2a\u7ec8\u7aef\uff08exit\u9000\u51fa\uff09</li> </ul> <pre><code>docker run --rm -it ubuntu\n</code></pre> <p>\u4ece<code>ubuntu</code>\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\uff0c\u5e76\u4e14\u5206\u914d\u4e00\u4e2a\u4f2a\u7ec8\u7aef.</p> <pre><code>docker build\n</code></pre> <ul> <li><code>-f/--file</code> \u6307\u5b9a\u6784\u5efa\u6240\u7528\u7684Dockerfile</li> <li><code>-t/--tag</code> \u4e3a\u955c\u50cf\u547d\u540d\u5e76\u6dfb\u52a0\u6807\u7b7e</li> </ul> <p>Tip</p> <p>\u8fd9\u91cc<code>.</code>\u6307\u7684\u662f\u955c\u50cf\u6784\u5efa\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u6bd4\u5982<code>COPY</code>\u5c31\u4f1a\u7528\u5230\u8fd9\u4e2a\u4e0a\u4e0b\u6587 \u8fd9\u91cc\u4e0d\u80fd\u7528<code>../</code>\u4e5f\u4e0d\u80fd\u7528<code>/</code>\u5f00\u5934\u7684\u7edd\u5bf9\u8def\u5f84</p> <pre><code>docker build -f path/to/Dockerfile -t test:1.0 .\n</code></pre> <p>\u5217\u51fa\u5df2\u6709\u7684\u955c\u50cf\uff1a</p> <pre><code>docker images\n</code></pre> <p>\u5217\u51fa\u8fd0\u884c\u7684\u5bb9\u5668;</p> <pre><code>docker ps --all\n</code></pre> <pre><code>docker exec &lt;options&gt; &lt;container&gt; &lt;command&gt;\ndocker attach &lt;options&gt; &lt;container&gt; # \u8fde\u63a5\u5230\u540e\u53f0\u5bb9\u5668\uff0c^P\u65ad\u5f00\ndocker start &lt;options&gt; &lt;container&gt; # \u542f\u52a8\u505c\u6b62\u8fd0\u884c\u7684\u5bb9\u5668\ndocker stop\ndocker rm # \u5220\u9664\u5bb9\u5668\ndocer rmi # \u5220\u9664\u955c\u50cf\ndocker cp &lt;options&gt; &lt;container&gt;:&lt;src_path&gt; &lt;dest_path&gt;\ndocker cp &lt;options&gt; &lt;src_path&gt; &lt;container&gt;:&lt;dest_path&gt;\n# \u5bbf\u4e3b\u673a\u548c\u5bb9\u5668\u4e4b\u95f4\u590d\u5236\u6587\u4ef6\n</code></pre>"},{"location":"section1/docker/#dockerfile\u4f8b\u5b50","title":"Dockerfile\u4f8b\u5b50","text":"<p>\u5199\u5165./Dockerfile</p> <pre><code>FROM ubuntu:22.04\n\nENV DEBIAN_FRONTEND=noninteractive\nWORKDIR /usr/src/cpp\nRUN echo -e \"build a cpp environment\" &gt; test.txt \\ \n    &amp;&amp; apt update &amp;&amp; apt install -y build-essential \n\nRUN cat &lt;&lt; EOF &gt; main.cpp\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n}\nEOF\n\nRUN g++ main.cpp -o main\nCMD [\"./main\"]\n</code></pre> <p>Tip</p> <p>docker\u955c\u50cf\u6709\u5206\u5c42\u7279\u6027\uff0c\u56e0\u6b64RUN\u5f88\u591a\u4e1c\u897f\u7684\u65f6\u5019\u6700\u597d\u7528<code>&amp;&amp;</code>\u8fde\u63a5</p> <p>Tip</p> <p>\u8fd8\u53ef\u4ee5\u5206\u9636\u6bb5\u6784\u5efa <pre><code># build\nFROM ubuntu AS builder\n\nWORKDIR /usr/src/cpp\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt update &amp;&amp; apt install -y build-essential\n\nCOPY main.cpp .\n\nRUN g++ main.cpp -o main -static\n\n# runtime\nFROM scratch\n\nCOPY --from=builder /usr/src/cpp/main .\n\nCMD [\"./main\"]\n</code></pre></p> <p>build\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u4ee3\u7406</p> <pre><code>docker build \\\n  --build-arg http_proxy=http://host.docker.internal:7890 \\\n  --build-arg https_proxy=http://host.docker.internal:7890 \\\n  -t cpp:1.0 .\n</code></pre> <pre><code>docker run -rm cpp:1.0\n</code></pre> <p>\u8fd9\u91cc\u6bd4\u8f83\u597d\u7684\u64cd\u4f5c\u662f\u5728\u5bbf\u4e3b\u548cDockerfile\u540c\u76ee\u5f55\u4e0b\u5199\u597dmain.cpp\u7136\u540eDockerfile\u91cc\u9762\u52a0\u4e0a</p> <pre><code>COPY main.cpp\n</code></pre>"},{"location":"section1/docker/#\u6570\u636e","title":"\u6570\u636e","text":"<p>\u6570\u636e\u5377</p> <p>\u7528<code>type=volume</code>\uff0c\u53ef\u7701\u7565</p> <pre><code>docker volume create database\ndocker volue ls\ndocker volume inspect database\ndocker volume rm database\n</code></pre> <pre><code>docker run --name web_backend \\\n    --mount source=database, target=/app/database \\\n    backend\ndocker inspect web_backend\n</code></pre> <p>\u4e3b\u673a\u76ee\u5f55</p> <p>\u7528<code>type=bind</code></p> <pre><code>docker run --name web_backend \\\n    --mount source=database,target=/app/database \\\n    --mount type=bind,source=/usr/apps/web_database,target=/app/database \\\n    --mount type=bind,source=/usr/apps/web_app/.env,target=/app/.env,readonly \\\n    backend\n</code></pre>"},{"location":"section1/git/","title":"Git\u4f7f\u7528","text":"<p>\u5b66\u4e60branching\u7684\u5c0f\u7f51\u7ad9 Learn Git Branching</p>"},{"location":"section1/git/#\u7b80\u5355\u5de5\u4f5c\u6d41","title":"\u7b80\u5355\u5de5\u4f5c\u6d41","text":"<p>\u521d\u59cb\u5316\u4ed3\u5e93\uff0c\u5e76\u4e14\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93</p> <pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin &lt;repository-url&gt;\ngit push -u origin main\n</code></pre> <p>\u5de5\u4f5c\u533a\u4fee\u6539\u5b8c\u4ee3\u7801\u4ee5\u540e\uff0c\u8dd1\u901a\u6d4b\u8bd5\uff0c\u67e5\u770b\u5f53\u524d\u72b6\u6001</p> <pre><code>git status\n</code></pre> <p>\u660e\u786e\u6dfb\u52a0\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u63d0\u4ea4</p> <pre><code>git add .\ngit commit -m \"Fix bug\"\n</code></pre> <p>\u67e5\u770b\u5f53\u524d\u65e5\u5fd7</p> <pre><code>git log --oneline --graph --all\n</code></pre> <p>\u660e\u786e\u5f53\u524d\u6240\u5728\u5206\u652f\u4ee5\u53ca\u8fdc\u7a0b\u5206\u652f\u4ee5\u540e\uff0c\u63a8\u9001\u5230\u8fdc\u7a0b</p> <pre><code>git push -u origin main\n</code></pre>"},{"location":"section1/git/#\u5206\u652f\u64cd\u4f5c","title":"\u5206\u652f\u64cd\u4f5c","text":"<p>\u521b\u5efa\u5206\u652f</p> <pre><code>git checkout -b new-feature\n</code></pre> <p>\u8fd9\u6837\u53ef\u4ee5\u5728\u65b0\u5206\u652f\u4e0acommit</p> <pre><code>git add .\ngit commit -m \"Add new feature\"\n</code></pre> <p>\u5408\u5e76\u5206\u652f\uff0c\u4f8b\u5982\u6211\u8981\u628anew-feature\u5206\u652f\u5408\u5e76\u5230main\u5206\u652f \u5148\u5207\u6362\u5230main\u5206\u652f</p> <pre><code>git checkout main\n</code></pre> <p>\u7136\u540e\u5408\u5e76\u5206\u652f</p> <pre><code>git merge new-feature\n</code></pre> <p>\u6216\u8005rebase</p> <pre><code>git rebase new-feature\n</code></pre> <p>merge\u548crebase\u7684\u533a\u522b\u5728\u4e8e\uff0cmerge\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5408\u5e76\u63d0\u4ea4\uff0c\u800crebase\u4f1a\u5c06\u63d0\u4ea4\u5386\u53f2\u7ebf\u6027\u5316\uff0c\u76f4\u63a5\u4ece\u5206\u652f\u8282\u70b9\u526a\u6389\u5f53\u524d\u5206\u652f\u63a5\u5230\u8981\u5408\u5e76\u7684\u5206\u652f\u4e0a\u3002</p>"},{"location":"section1/git/#\u8fdc\u7a0b\u64cd\u4f5c","title":"\u8fdc\u7a0b\u64cd\u4f5c","text":"<p>\u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93</p> <pre><code>git remote -v\n</code></pre> <p>Tip</p> <p>\u5982\u679c\u53d1\u73b0\u662f\u522b\u4eba\u7684\u4ed3\u5e93\uff0c\u5148fork\u4e00\u4efd\u3002</p> <p>\u5982\u679c\u5df2\u7ecf\u5728\u522b\u4eba\u7684origin/main\u4e0b\u6e38\u6709\u672c\u5730\u7684\u63d0\u4ea4\uff0c\u53ef\u4ee5\u5148\u66ff\u6362\u6210\u81ea\u5df1\u7684\u5e93</p> <pre><code>git remote set-url origin &lt;your-repository-url&gt;\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0c\u8fd9\u5c06\u6210\u529f\u628aorigin\u66ff\u6362\u6210\u81ea\u5df1\u7684\u3002</p> <p>\u5148\u628a\u8fdc\u7a0b\u7684\u5206\u652f\u62c9\u4e0b\u6765\uff0c\u6307\u5b9a\u5206\u652f\u540d</p> <pre><code>git fetch origin main\n</code></pre> <p>\u770b\u4e00\u4e0blog</p> <pre><code>git log --oneline --graph --all\n</code></pre> <p>\u7136\u540emerge\u6216\u8005rebase\uff08\u5047\u8bbe\u76ee\u524d\u5df2\u7ecf\u5728main\u5206\u652f\uff09</p> <pre><code>git merge origin/main\ngit rebase origin/main\n</code></pre> <p>fetch\u548c\u5408\u5e76\u53ef\u4ee5\u7528pull\u4ee3\u66ff</p> <pre><code>git pull origin main\ngit pull --rebase origin main\n</code></pre> <p>\u7136\u540e\u66f4\u65b0\u8fdc\u7a0b\u7684main\u5206\u652f</p> <pre><code>git push origin main\n</code></pre> <p>\u8fd9\u6837\u8fdc\u7a0b\u7684main\u5206\u652f\u5c31\u6709\u672c\u5730main\u5206\u652f\u7684\u6240\u6709\u63d0\u4ea4\u8bb0\u5f55</p>"},{"location":"section1/git/#\u5176\u4ed6\u64cd\u4f5c","title":"\u5176\u4ed6\u64cd\u4f5c","text":"<p>\u5728\u5206\u652f\u4e4b\u95f4\u5207\u6362</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre> <p>\u91cd\u7f6e\u5f53\u524d\u5206\u652f\uff08\u5206\u652f\u6307\u9488\u548cHEAD\u4e00\u8d77\u56de\u9000\uff09</p> <pre><code>git reset --soft HEAD~2\n</code></pre> <p>Tip</p> <p>reset --hard\u4f1a\u4e22\u5f03\u5f53\u524d\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a\u7684\u6240\u6709\u4fee\u6539\uff0c\u628a\u5de5\u4f5c\u533a\u91cd\u7f6e\u5230\u6307\u5b9a\u7684\u63d0\u4ea4\uff0c\u4e4b\u540e\u7684\u63d0\u4ea4\u4e5f\u4f1a\u4e22\u5931\u3002 \u5982\u679c\u7528--soft\u9009\u9879\uff0c\u4f1a\u4fdd\u7559\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a\u7684\u4fee\u6539\uff0c\u53ea\u79fb\u52a8HEAD\u6307\u9488\u3002 \u5982\u679c\u7528--mixed\u9009\u9879\uff08\u9ed8\u8ba4\uff09\uff0c\u4f1a\u4fdd\u7559\u5de5\u4f5c\u533a\u4fee\u6539\uff0c\u4f46\u6e05\u7a7a\u6682\u5b58\u533a\u3002</p> <p>\u8fd8\u53ef\u4ee5\u7528checkout\u547d\u4ee4\u6765\u67e5\u770b\u67d0\u4e2a\u5386\u53f2\u63d0\u4ea4\uff0c\u8fdb\u5165detached HEAD\u72b6\u6001</p> <pre><code>git checkout &lt;commit-id&gt;\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\uff1a\u8fd9\u4f1a\u8ba9\u5de5\u4f5c\u533a\u5185\u5bb9\u53d8\u6210\u6307\u5b9a\u63d0\u4ea4\u7684\u72b6\u6001\uff08\u6539\u53d8HEAD\u6307\u9488\uff09\uff0c\u4f46\u4e0d\u4f1a\u6539\u53d8\u5206\u652f\u6307\u9488\u3002 \u8981\u8fd4\u56de\u539f\u5206\u652f\uff0c\u4f7f\u7528\uff1a</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre> <p>\u4e34\u65f6\u50a8\u85cf\u5de5\u4f5c\u533a\u4fee\u6539</p> <pre><code>git stash push -m \"\u63cf\u8ff0\u4fe1\u606f\"\n</code></pre> <p>\u67e5\u770b\u50a8\u85cf\u5217\u8868</p> <pre><code>git stash list\n</code></pre> <p>\u6062\u590d\u50a8\u85cf\u7684\u4fee\u6539</p> <pre><code>git stash pop    # \u6062\u590d\u6700\u65b0\u50a8\u85cf\u5e76\u5220\u9664\ngit stash apply  # \u6062\u590d\u6700\u65b0\u50a8\u85cf\u4f46\u4e0d\u5220\u9664\n</code></pre> <p>\u5220\u9664\u50a8\u85cf</p> <pre><code>git stash drop   # \u5220\u9664\u6700\u65b0\u50a8\u85cf\ngit stash clear  # \u6e05\u7a7a\u6240\u6709\u50a8\u85cf\n</code></pre> <p>\u8fd9\u91ccstash\u540c\u65f6\u4fdd\u7559\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a\u7684\u72b6\u6001\uff0c\u6062\u590d\u65f6\u4f1a\u5c3d\u91cf\u4fdd\u6301\u539f\u6765\u7684\u72b6\u6001\u3002</p> <p>\u5982\u679c\u8981\u628a\u5de5\u4f5c\u533a\u67d0\u4e2a\u6587\u4ef6\u6062\u590d\u5230\u67d0\u4e2a\u63d0\u4ea4\u7684\u72b6\u6001\uff0c\u53ef\u4ee5\u7528</p> <pre><code>git checkout &lt;commit-id&gt; -- &lt;file&gt;\n</code></pre> <p>\u6ce8\u610f\u6b64\u65f6HEAD\u4e0d\u4f1a\u6539\u53d8\u3002</p> <p>\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u8981\u4ece\u4e0a\u6e38\u63d0\u4ea4\u5f00\u59cb\u518d\u521b\u5efa\u65b0\u7684\u5206\u652f</p> <pre><code>git checkout -b new-branch &lt;commit-id&gt;\n</code></pre> <p>\u8fd9\u76f8\u5f53\u4e8e\u5728\u4e0a\u6e38\u63d0\u4ea4\u7684\u57fa\u7840\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5206\u652f\uff0cHEAD\u6307\u9488\u4f1a\u6307\u5411new-branch\u5206\u652f.</p>"},{"location":"section1/linux/","title":"Linux\u547d\u4ee4","text":"<p>\u4f7f\u7528linux\u65f6\u591a\u601d\u8003\u5982\u4f55\u76f4\u63a5\u7528\u547d\u4ee4\u884c\u5b9e\u73b0\u4e00\u4e9b\u590d\u6742\u64cd\u4f5c</p>"},{"location":"section1/linux/#wc\u547d\u4ee4","title":"wc\u547d\u4ee4","text":"<p>wc\u7684\u4f7f\u7528\uff0c\u5e38\u5e38\u642d\u914dpipeline\uff0c\u6bd4\u5982\u6211\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u4e0b\u6709\u591a\u5c11\u4e2a\u5b50\u76ee\u5f55\uff1a</p> <pre><code>ls -l | grep '^d' | wc -l\n</code></pre> <p><code>ls -l</code> \u5217\u51fa\u8be6\u7ec6\u4fe1\u606f\uff0c<code>grep '^d'</code> \u8fc7\u6ee4\u51fa\u76ee\u5f55\u884c\uff0c<code>wc -l</code> \u7edf\u8ba1\u884c\u6570\u3002</p>"},{"location":"section1/linux/#sed\u547d\u4ee4","title":"sed\u547d\u4ee4","text":"<p>sed\u7684\u51e0\u4e2a\u5e38\u89c1\u4f7f\u7528\u573a\u666f\uff1a</p> <pre><code>sed -i 's/old/new/g' filename  # \u66ff\u6362old\u4e3anew\nsed -i 'Nd' filename  # \u5220\u9664\u7b2cN\u884c\nsed -i '/pattern/d' filename  # \u5220\u9664\u5305\u542bpattern\u7684\u884c\n</code></pre> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u8981\u5220\u9664\u6240\u6709'.jpg'\u7684\u5b57\u7b26</p> <pre><code>sed -i 's/\\.jpg//g' filename\n</code></pre> <p>sed\u63d2\u5165</p> <pre><code>sed -i '1i\\new line' filename  # \u5728\u7b2c\u4e00\u884c\u524d\u63d2\u5165\u65b0\u884c\n</code></pre> <p>sed\u8ffd\u52a0</p> <pre><code>sed -i '1a\\new line' filename  # \u5728\u7b2c\u4e00\u884c\u540e\u63d2\u5165\u65b0\u884c\n</code></pre> <p>Tip</p> <p>\u603b\u7ed3\u4e00\u4e0bsed\u7684\u8bed\u6cd5\uff0c\u4e00\u822c\u6765\u8bf4\u4f1a\u8fd9\u4e2a\u66ff\u6362\u5c31\u5dee\u4e0d\u591a\uff1a</p> <ul> <li><code>s/old/new/g</code> \u66ff\u6362</li> <li><code>Nd</code> \u5220\u9664\u7b2cN\u884c</li> <li><code>/pattern/d</code> \u5220\u9664\u5305\u542bpattern\u7684\u884c</li> <li><code>Ni\\text</code> \u5728\u7b2cN\u884c\u524d\u63d2\u5165text</li> <li><code>Na\\text</code> \u5728\u7b2cN\u884c\u540e\u63d2\u5165text</li> <li><code>-i</code> \u76f4\u63a5\u4fee\u6539\u6587\u4ef6</li> <li>\u4e0d\u52a0<code>-i</code>\u5219\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa</li> <li><code>g</code>\u8868\u793a\u5168\u5c40\u66ff\u6362</li> <li><code>s</code>\u8868\u793a\u66ff\u6362</li> </ul>"},{"location":"section1/linux/#awk\u547d\u4ee4","title":"awk\u547d\u4ee4","text":"<p>awk\u547d\u4ee4\u7684\u4f5c\u7528\u662f\u6309\u5217\u5904\u7406\u6587\u672c\uff0c\u628a\u8f93\u5165\u7684\u6bcf\u884c\u6587\u672c\u6309\u6307\u5b9a\u5206\u9694\u7b26\uff08\u9ed8\u8ba4\u7a7a\u683c\u6216\u5236\u8868\u7b26\uff09\u5206\u6210\u591a\u4e2a\u5b57\u6bb5\uff0c\u7136\u540e\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u5b57\u6bb5\u8fdb\u884c\u64cd\u4f5c\u3002</p> <pre><code>echo \"a b c\" | awk '{print $1, $3}'  # \u6253\u5370\u7b2c\u4e00\u5217\u548c\u7b2c\u4e09\u5217\ndu -sh * | awk '{print $1, $2}'\nawk '{print $2}' filename  # \u6253\u5370\u7b2c\u4e8c\u5217\nawk -F: '{print $1}' /etc/passwd  # \u6253\u5370/etc/passwd\u7684\u7b2c\u4e00\u5217\nps aux | awk '$3 &gt; 50 {print $1, $3}'  # \u6253\u5370CPU\u4f7f\u7528\u7387\u5927\u4e8e50\u7684\u8fdb\u7a0b\nls -l | awk '/^d/ {print $9}'  # \u6253\u5370\u6240\u6709\u76ee\u5f55\u7684\u540d\u79f0\ncat file.txt | awk 'NF &gt; 0'  # \u5220\u9664\u7a7a\u884c NF &gt; 0 \u8868\u793a\u975e\u7a7a\u884c\n</code></pre>"},{"location":"section2/24-fall-C-programming/","title":"24 fall C programming course notes","text":"<p>\u8fd9\u662f\u621124fall \u7a0b\u5e8f\u8bbe\u8ba1\u8bfe\u7a0b\u6240\u4f7f\u7528\u7684\u7b14\u8bb0.  </p> <p>\u7531\u4e8e\u8fd9\u662f\u4eceObsidian\u5e93\u76f4\u63a5\u642c\u6765\u7684\uff0c\u90e8\u5206\u94fe\u63a5404. </p>"},{"location":"section2/24-fall-C-programming/#struct-and-linked-list","title":"Struct and linked list","text":""},{"location":"section2/24-fall-C-programming/#ex1-basic-struct","title":"Ex.1 Basic struct","text":"<pre><code>#include &lt;stdio.h&gt;\n\nstruct dog {\n    int age;\n    void (*bark)(int);\n} dog1;\n// we can define struct here, but the bark function must be identified before that.\n\nvoid bark(int age) {\n    printf(\"woof at age%d\\n\", age);\n}\n\nint main() {\n    struct dog dog = {3, bark};\n    // struct name can be the same as struct variance name.\n\n    struct dog* dogptr = &amp;dog;\n\n    printf(\"the size of a struct ptr is %d bytes.\\n\", (int)sizeof(dogptr));\n    // 8 bytes.\n\n    (*dogptr).bark(2);\n    // . is prior to *, we need a ().\n\n    dog.bark(dog.age);\n\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex2-forward-declaration","title":"Ex.2 Forward declaration","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// \u524d\u5411\u58f0\u660e\u7ed3\u6784\u4f53\nstruct Date;  // \u53ea\u58f0\u660e\uff0c\u4e0d\u5b9a\u4e49\n\n// \u5b9a\u4e49\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53 \"Person\"\uff0c\u91cc\u9762\u5305\u542b \"Date\" \u7c7b\u578b\u7684\u6307\u9488\nstruct Person {\n    char name[50];\n    struct Date *birthdate;  // \u58f0\u660e Date \u7c7b\u578b\u7684\u6307\u9488\n};\n\n/*\n\u4e8b\u5b9e\u4e0a\uff0c \u7ed3\u6784\u4f53\u8fd8\u53ef\u4ee5\u5d4c\u5957\u5b9a\u4e49\nstruct outer_struct {\n    struct inner_struct{\n    };\n};\n\n\u4f46\u662f inner \u53ea\u80fd\u5728outer\u4f5c\u7528\u57df\u5185\u8bbf\u95ee\u3002\nstruct Person {\n    char name[50];\n    struct Address {  // \u9519\u8bef\uff1aAddress \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4ec5\u9650\u4e8e Person \u5185\u90e8\n        char street[100];\n        char city[50];\n    } address;\n};\n\n// \u6b64\u5904\u4e0d\u80fd\u518d\u5b9a\u4e49 Address \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u7684\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e Person \u5185\u90e8\nstruct Address addr;  // \u7f16\u8bd1\u9519\u8bef\n\n\n*/\n// \u5b9a\u4e49\u7ed3\u6784\u4f53 Date\nstruct Date {\n    int day;\n    int month;\n    int year;\n};\n\nint main() {\n    struct Date d1 = {15, 5, 1990};\n    struct Person p1 = {\"John Doe\", &amp;d1};  // \u521d\u59cb\u5316 Person\uff0c\u4f20\u5165 Date \u6307\u9488\n\n    // \u8bbf\u95ee\u5d4c\u5957\u7ed3\u6784\u4f53\u6210\u5458\n    printf(\"Name: %s\\n\", p1.name);\n    printf(\"Birthdate: %d/%d/%d\\n\", p1.birthdate-&gt;day, p1.birthdate-&gt;month, p1.birthdate-&gt;year);\n\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex3-struct-array","title":"Ex.3 Struct array","text":"<pre><code>struct student {\n    int num;\n    char name[20];\n    char sex;\n} stu[100];\n// here we define a struct array, or we define it later. We can also initialize it.\nstruct student st[2] = {{1, \"Kobe\", 'M'}};\n// here all members of st[1] are 0 or \"\\0\";\n\n// use a ptr;\nstruct student* stuptr = st;\n\nprintf(\"%s\\n\", (*stuptr).name);\n// remember ().\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex4-struct-and-function","title":"Ex.4 Struct and function","text":"<pre><code>#include &lt;stdio.h&gt; \nint dayTable[ ][12]={ {31,28,31,30,31,30,31,31,30,31,30,31}, /* \u5e73\u5e74 */ {31,29,31,30,31,30,31,31,30,31,30,31}};/* \u95f0\u5e74 */ \n\nstruct Date { \n    int day; \n    int month; \n    int year; \n    int yearDay; \n} date; \n/* \u5b9a\u4e49\u4e00\u4e2aDate\u7ed3\u6784\u7c7b\u578b\u7684\u7ed3\u6784\u53d8\u91cf */ \n\n/* \u8ba1\u7b97\u5e74\u4e2d\u7b2c\u51e0\u5929\u51fd\u6570 */ \nvoid dayofYear(struct Date* date) { \n    int i, leap; \n    date-&gt;yearDay = date-&gt;day; \n    leap = (date-&gt;year%4 == 0 &amp;&amp; date-&gt;year%100) || date-&gt;year%400 == 0; \n    /* \u662f\u5426\u95f0\u5e74 */ \n    for (i = 0; i &lt; date-&gt;month - 1; i++) \n        date-&gt;yearDay += dayTable[leap][i]; \n} \n\n\nint main() { \n    int leap, days; \n    printf(\"\\tDate Conversion Program\\n\"); \n    printf(\"Year = \"); \n    scanf(\"%d\", &amp;date.year); \n    /* \u8f93\u5165\u5e74\u4efd */ \n    for (; ;) { \n        printf(\"Month = \"); \n        scanf(\"%d\",&amp;date.month); \n        if (date.month &gt;= 1 &amp;&amp; date.month &lt;= 12) \n        break; \n        printf(\"\u8f93\u5165\u7684\u6708\u4efd\u5fc5\u987b\u5728 1 \u5230 12 \u4e4b\u95f4\\n\" ); \n    } \n    /* leap=1\u662f\u95f0\u5e74\uff0cleap=0 \u4e0d\u662f\u95f0\u5e74 */ \n    leap = (date.year%4 == 0&amp;&amp;date.year%100)||date.year%400==0; \n\n    days = dayTable[leap][date.month-1]; \n    /* \u8f93\u5165\u65e5\u671f\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u8f93\u5165\u6b63\u786e */ \n\n    for (; ;) { \n    printf(\"Day = \"); \n    scanf(\"%d\", &amp;date.day); \n    if (date.day &gt;= 1 &amp;&amp; date.day &lt;= days) \n    break; \n    printf(\"\u8f93\u5165\u7684\u5929\u5fc5\u987b\u5728 1 \u5230 %d \u4e4b\u95f4\\n\",days); \n    } \n    /* \u8c03\u7528dateofYear\u51fd\u6570\uff0c\u5b9e\u53c2\u4e3a\u7ed3\u6784date\u76843\u4e2a\u6210\u5458 */\n    dayofYear(&amp;date); \n    printf(\"The days of the year are: \n    %d\\n\",date.yearDay); \n    return 0;\n} \n\n// \u7ed3\u6784\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\n// \u51fd\u6570\u4ee5\u7ed3\u6784\u4f5c\u4e3a\u5f62\u53c2\uff0c\u4e0d\u80fd\u6539\u53d8\u5b9e\u53c2\u3002\n    d.yearDay = day.\n// \u6b64\u65f6\u4e00\u822c\u91c7\u7528\u7ed3\u6784\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\uff08\u4e0d\u5b89\u5168\uff0c \u6548\u7387\u9ad8\uff09\n// \u6216\u8005\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784(\u6548\u7387\u4f4e\uff0c \u5b89\u5168)\nstruct date dayofYear(struct date d){\n//change member of d;\n    return d;\n} \n    date = dayofYear(date);\n// update \"date\".\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex5-linked-list-basics","title":"Ex.5 Linked list basics","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct intNode {  \n    int val;\n    struct intNode* next;\n};\n\nstruct stringNode {\n    char str[40];\n    struct stringNode* next;\n};\n\n//print linked list\nvoid print_list(struct intNode* p) {\n    if (p == NULL){\n        printf(\"Empty list!\\n\");\n        return;\n    }\n    int cnt = 1;\n    while(p) {\n        printf(\"The %d element of list is %d\", cnt, p -&gt; val);\n        p = p -&gt; next;\n        cnt++;\n    }\n}\n\n//define a function to create an intNode.\n\nstruct intNode* create_node(int val, struct intNode* next){\n    struct intNode* p = (struct intNode*) malloc(sizeof(struct intNode));\n//malloc(n * sizeof(type)) equals to calloc(n, sizeof(type));\n    if (p == NULL){\n        printf(\"Fail to malloc!\\n\");\n    }\n    p -&gt; val = val;\n    p -&gt; next = next;\n    return p;\n}\n\n\nstruct stringNode* create_string_node(char* str, struct stringNode* next){\n    struct stringNode* p = (struct stringNode*) malloc(sizeof(struct stringNode));\n\n    // p -&gt; str = str;\n    strcpy(p -&gt; str, str);\n    // Notice, char* = char[] is wrong.\n\n    p -&gt; next = next;\n    return p;\n}\n\n//input n numbers, create sorted list;\n\nstruct intNode* createSortList(int n) {\n    printf(\"You are creating a %d sort list!\\n\", n);\n    struct intNode* p, *tmp , *head = NULL;\n//here, only head is initialized;\n    for (int k = 1; k &lt;= n; k++){\n        int cur;\n        printf(\"Enter the %d element!\\n\", k);\n        scanf(\"%d\", &amp;cur);\n        p = head;\n        while (p &amp;&amp; p -&gt; val &lt; cur) {\n            tmp = p;\n            p = p -&gt; next;\n        }\n        if (p == head) {\n            tmp = head;\n            head = create_node(cur, tmp);\n        }\n        else {\n            tmp -&gt; next = create_node(cur, p);\n        }\n    }\n    return head;\n}\n\nstruct intNode* createSortList(int* list, int size) {\n    struct intNode* p, *tmp , *head = NULL;\n    for (int k = 0; k &lt; size; k++){\n        int cur = list[k];\n        p = head;\n        while (p &amp;&amp; p -&gt; val &lt; cur) {\n            tmp = p;\n            p = p -&gt; next;\n        }\n        if (p == head) {\n            tmp = head;\n            head = create_node(cur, tmp);\n        }\n        else {\n            tmp -&gt; next = create_node(cur, p);\n        }\n    }\n    return head;\n}\n//copy h to p, where p is a new head node ptr.\n\nstruct intNode* copy_node(struct intNode* h){\n    if (h == NULL) return NULL;\n    return create_node(h -&gt; val, copy_node(h -&gt; next));\n}\n\n//\u6709\u5e8f\u94fe\u8868\u67e5\u627e.\u51cf\u5c11\u904d\u5386\u65f6\u95f4.\nstruct intNode* searchSolink(struct intNode* h, int key){\n    struct intNode* cur = h;\n    while (cur &amp;&amp; cur -&gt; val &lt; key) {\n        cur = cur -&gt; next;\n    }\n    return cur &amp;&amp; cur -&gt; next == key ? cur : NULL;\n}\n\n//\u6307\u5b9a\u8282\u70b9\u63d2\u5165\uff0c\u5305\u542b\u65e0\u5e8f\u904d\u5386\uff0c\u53ea\u63d2\u5165\u4e00\u6b21.\n\nvoid insert(struct intNode* h, int key, int num){\n    struct intNode* cur = h;\n    while (cur &amp;&amp; cur -&gt; val != key){\n        cur = cur -&gt; next;\n    }\n    if (cur == NULL){\n        printf(\"Key not found.\\n\");\n    }\n//\u627e\u5230\u8282\u70b9\uff0c\u5728\u540e\u9762\u63d2\u5165\u65b0\u8282\u70b9\n    cur -&gt; next = create_node(num, cur -&gt; next);\n}\n//\u5355\u94fe\u8868\u5220\u9664\u6307\u5b9a\u8868\u5143\uff0c\u8fd4\u56de\u5934\u6307\u9488.\uff08\u5220\u9664\u6240\u6709\uff09\n\nstruct intNode* del(struct intNode* h, int key) {\n\n    struct intNode* p = h;\n//\u5220\u9664\u8fde\u7eed\u7684\u5934\u8282\u70b9\n    while (h &amp;&amp; h -&gt; val == key){\n        struct intNode* temp = h;\n        h = h -&gt; next;\n        free(temp);\n    }\n\n    p = h;\n//p\u662f\u7b2c\u4e00\u4e2a\u4e0d\u7b49\u4e8ekey\u7684\u8282\u70b9\n    while (p &amp;&amp; p -&gt; next){\n        if (p -&gt; next -&gt; val == key){\n            struct intNode* temp = p -&gt; next;\n            p -&gt; next = temp -&gt; next;\n            free (temp);\n        }\n//\u53ea\u6709\u5728\u6ca1\u6709\u5220\u9664p\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u65f6\u624d\u66f4\u65b0p\uff0c \u5426\u5219\u4e0d\u80fd\u5220\u9664\u8fde\u7eed\u7684\u8282\u70b9\u3002\n\n        else p = p -&gt; next;\n    }\n    return h;\n}\n\n//create a single list with continuous integers 1 to n, assert n &gt;= 1;\nstruct intNode* create_integer_list(int n) {\n    struct intNode* p = create_node(1, NULL);\n    struct intNode* h = p;\n    for (int k = 1; k &lt;= n - 1; k++) {\n        p -&gt; next = create_node(k + 1, NULL);\n        p = p -&gt; next;\n    }\n    return h;\n}\n\n\n//A solution for copying using while iteration,\n\nstruct intNode* another_copy_node(struct intNode* h){\n    if (h == NULL) return NULL;\n// copy h, so that h would not be moved.\n    struct intNode* tmp = h;\n// create head node ptr p;\n    struct intNode* p = create_node(h -&gt; val, NULL);\n// save a copy of p, which would be returned;\n    struct intNode* res = p;\n// move to second ptr\n    tmp = tmp -&gt; next;\n    while (tmp){\n        p -&gt; next = create_node(tmp -&gt; val, NULL);\n        p = p -&gt; next;\n        tmp = tmp -&gt; next;\n    }\n    return res;\n}\n\n\nint main() {\n\n//Create a linked list.\n\n// 1 -&gt; 2 -&gt; NULL;\n    struct intNode* myNode = create_node(1, create_node(2, NULL));\n    free (myNode);\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex6-exercises-of-linked-list","title":"Ex.6 Exercises of linked list","text":"<ul> <li>https://leetcode.cn/problems/design-linked-list/description/</li> <li>https://leetcode.cn/problems/remove-linked-list-elements/</li> <li>https://leetcode.cn/problems/reverse-linked-list/</li> <li>https://leetcode.cn/problems/swap-nodes-in-pairs/</li> <li>https://leetcode.cn/problems/remove-nth-node-from-end-of-list/</li> <li>https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</li> <li>https://leetcode.cn/problems/linked-list-cycle-ii/</li> <li>https://leetcode.cn/problems/rotate-list/description/</li> </ul>"},{"location":"section2/24-fall-C-programming/#1-loop-pop","title":"1 loop pop","text":"<pre><code>// make a loop list .I n this case , enter n, m. \n// where n is length of loop list. Every mth member of the list pop out.\n// print the order.\n\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\nstruct intNode {\n    int val;\n    struct intNode* next\n};\n\nstruct intNode* create_node(int val, struct intNode* next) {\n    struct intNode* p = (struct intNode*) malloc (sizeof(struct intNode));\n    p -&gt; next = next;\n    p -&gt; val = val;\n    return p;\n}\n\nstruct intNode* makeloop(int n) {\n    struct intNode* head = create_node(1, NULL);\n    struct intNode* p = head;\n    for (int i = 2 ; i &lt;= n; i++){\n        p -&gt; next = create_node(i , NULL);\n        p = p -&gt; next;\n    }\n    p -&gt; next = head;\n    return head;\n}\n\n// To change the head pointer , we pass the address of pointer.\n\nvoid operate(struct intNode** h){\n    struct intNode* p = *h;\n    int cnt = 0;\n    for (; cnt &lt; m - 2; cnt++) {\n        p = p -&gt; next;\n    }\n    struct intNode* v = p -&gt; next;\n    printf(\"Number %d out!\\n\", v -&gt; val);\n    p -&gt; next = v -&gt; next;\n    free(v);\n    (*h) = p -&gt; next;\n}\n\nint cond(struct intNode** h){\n    if ((*h) -&gt; next == (*h)){\n        printf(\"Number %d out\\n\", (*h) -&gt; val);\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int m , n;\n    printf(\"Enter n : \\n\");\n    scanf(\"%d\", &amp;n);\n    printf(\"Enter m : \\n\");\n    scanf(\"%d\", &amp;m);\n    struct intNode* list = makeloop(n);\n    while(1){\n        operate(&amp;list);\n        if (cond(&amp;list)) break;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#2-poly-add","title":"2 poly add","text":"<pre><code>// \u591a\u9879\u5f0f\u76f8\u52a0, \u4e0d\u8981\u6c42\u8f93\u5165\u964d\u5e8f\u6392\u5217\uff0c\u8f93\u51fa\u964d\u5e8f\u6392\u5217\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex7-union","title":"Ex.7 Union","text":"<p>\u8054\u5408\u7684\u7279\u70b9\uff1a   1. \u4e00\u4e2a\u8054\u5408\u53ef\u5b58\u653e\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u5728\u6bcf\u4e00\u5177\u4f53\u65f6 \u523b\u53ea\u80fd\u5b58\u653e\u5176\u4e2d\u4e00\u79cd\u6570\u636e\uff0c\u4e0d\u80fd\u540c\u65f6\u5b58\u653e\u591a\u79cd\u6570\u636e\u3002    2. \u8054\u5408\u53d8\u91cf\u4e2d\u8d77\u4f5c\u7528\u7684\u6210\u5458\u662f\u6700\u540e\u4e00\u6b21\u5b58\u653e\u7684\u6210\u5458\u3002 \u4f8b\u5982\uff1a x.ival = 1; x.fval = 2.0; x.chval= '?'; 121 \u8bf4\u660e\uff1a\u53ea\u6709 x.chval \u662f\u6709\u6548\u7684\uff0c\u800c x.ival \u53ca x.fval \u5f15\u7528\u5176\u503c\u5df2\u7ecf\u53d8\u6210\u4e0d\u786e\u5b9a\u7684\u4e86\u3002    3. \u8054\u5408\u53d8\u91cf\u7684\u5f00\u59cb\u5730\u5740\u548c\u5b83\u7684\u5404\u6210\u5458\u53d8\u91cf\u7684\u5f00\u59cb\u5730\u5740 \u90fd\u662f\u76f8\u540c\u7684\u3002\u4f8b\u5982\uff1a&amp;x\uff0c&amp;x.ival\uff0c&amp;x.chval \u90fd\u662f\u540c\u4e00 \u5730\u5740\u503c\u3002    4. \u5bf9\u8054\u5408\u7684\u521d\u59cb\u5316\u53ea\u80fd\u5bf9\u5176\u6210\u5458\u8868\u4e2d\u5217\u4e3e\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\u7f6e\u521d\u503c\u3002    5. \u51fd\u6570\u7684\u5f62\u53c2\u4e0d\u80fd\u662f\u8054\u5408\u7c7b\u578b\uff0c\u51fd\u6570\u7684\u7ed3\u679c\u4e5f\u4e0d\u80fd\u662f \u8054\u5408\u7c7b\u578b\u3002\u4f46\u6307\u5411\u8054\u5408\u7684\u6307\u9488\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\uff0c\u51fd \u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de\u6307\u5411\u8054\u5408\u7684\u6307\u9488\u3002    6. \u8054\u5408\u53ef\u4ee5\u5d4c\u5957\u5728\u7ed3\u6784\u4e2d\u3002   7. \u8054\u5408\u7684\u5927\u5c0f\u4e00\u822c\u7b49\u4e8e\u6700\u5927\u6570\u636e\u7684\u5927\u5c0f\u3002 <pre><code>#include &lt;stdio.h&gt;\n\nunion Data{\n    int ival;\n    char chval;\n    float fval;\n}x, y ,z;\n\nint main() {\n    x.ival = 1;\n    x.fval = 2.0;\n//\u53ea\u6709fval\u6709\u6548\uff0c\n    return 0;\n}\n</code></pre></p>"},{"location":"section2/24-fall-C-programming/#ex8-bit-fields","title":"Ex.8 Bit-fields","text":"<p>\u7cbe\u786e\u63a7\u5236\u7ed3\u6784\u6210\u5458\u5360\u7528\u4f4d\u6570 <pre><code>#include &lt;stdio.h&gt;\n\nstruct Example {\n    unsigned int a : 5;  // 5 bits for 'a'\n    unsigned int b : 3;  // 3 bits for 'b'\n    unsigned int c : 4;  // 4 bits for 'c'\n};\n\nint main() {\n    struct Example ex;\n\n    ex.a = 15;   // 5 bits can hold values from 0 to 31 (binary: 1111)\n    ex.b = 5;    // 3 bits can hold values from 0 to 7 (binary: 101)\n    ex.c = 9;    // 4 bits can hold values from 0 to 15 (binary: 1001)\n\n    printf(\"a = %u, b = %u, c = %u\\n\", ex.a, ex.b, ex.c);\n    printf(\"sizeof(struct Example) = %zu\\n\", sizeof(ex));\n//\u8fd9\u91cc\u7684size\u548c\u5bf9\u9f50\u6709\u5173\u3002\n    return 0;\n}\n</code></pre></p> <p>\u7528\u4e8c\u8fdb\u5236\u7684\u4e00\u4f4d\u6216\u8fde\u7eed\u82e5\u5e72\u4f4d\u4ee3\u8868\u4e0d\u540c\u5c5e\u6027\u7684\u72b6\u6001\u3002 \u4f8b\u5982\uff1a \u67d0\u53f0\u8ba1\u7b97\u673a\u914d\u7f6e\u7684\u78c1\u76d8\u673a\u4e2d\u7684\u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u5b57\u957f\u4e3a16 \u4f4d(\u81ea\u53f3\u81f3\u5de6\uff0c\u7b2c0\u4f4d\u81f3\u7b2c15\u4f4d)\u3002\u8bbe\u5176\u4e2d\u67d0\u4e9b\u4f4d\u7684\u610f\u4e49\u5982\u4e0b\uff1a \u7b2c15\u4f4d: \u7f6e 1 \u8868\u793a\u6570\u636e\u4f20\u9001\u53d1\u751f\u9519\u8bef\uff1b  \u7b2c7\u4f4d : \u7f6e 1 \u8868\u793a\u8bbe\u5907\u5df2\u51c6\u5907\u597d\uff0c\u53ef\u4f20\u9001\u6570\u636e\uff1b  \u7b2c6\u4f4d : \u7f6e 1 \u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\uff1b  \u7b2c2\u4f4d : \u7f6e 1 \u8868\u793a\u8bfb\uff1b  \u7b2c1\u4f4d : \u7f6e 1 \u8868\u793a\u5199\u3002  \u4e3a\u5b9e\u73b0\u4e0a\u8ff0\u8981\u6c42\u53ef\u4ee5\u7ed9\u5bf9\u5e94\u5b57\u4e2d\u7684\u67d0\u4e9b\u4e8c\u8fdb\u4f4d\u5b9a\u4e49\u4e00 \u7cfb\u5217\u8868\u793a\u7279\u5f81\u7684\u4ee3\u7801\u3002</p> <p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n\nstruct ControlStatus {\n    unsigned int error : 1;    // \u7b2c15\u4f4d: \u6570\u636e\u4f20\u9001\u53d1\u751f\u9519\u8bef\n    unsigned int reserved1 : 8; // \u4fdd\u7559\u4f4d 8-14\n    unsigned int ready : 1;    // \u7b2c7\u4f4d: \u8bbe\u5907\u5df2\u51c6\u5907\u597d\n    unsigned int interrupt_enable : 1; // \u7b2c6\u4f4d: \u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\n    unsigned int reserved2 : 3; // \u4fdd\u7559\u4f4d 3-5\n    unsigned int read : 1;     // \u7b2c2\u4f4d: \u8bfb\n    unsigned int write : 1;    // \u7b2c1\u4f4d: \u5199\n    unsigned int reserved3 : 1; // \u7b2c0\u4f4d: \u4fdd\u7559\n};\n\nint main() {\n    struct ControlStatus reg = {0}; // \u521d\u59cb\u5316\u5bc4\u5b58\u5668\u4e3a0\n\n    // \u8bbe\u7f6e\u72b6\u6001\n    reg.error = 1;        // \u6570\u636e\u4f20\u9001\u53d1\u751f\u9519\u8bef\n    reg.ready = 1;        // \u8bbe\u5907\u5df2\u51c6\u5907\u597d\n    reg.interrupt_enable = 1;  // \u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\n    reg.read = 1;         // \u8bfb\u64cd\u4f5c\n    reg.write = 1;        // \u5199\u64cd\u4f5c\n\n    // \u6253\u5370\u5bc4\u5b58\u5668\u7684\u6bcf\u4e00\u4f4d\u7684\u72b6\u6001\n    printf(\"Error: %u\\n\", reg.error);\n    printf(\"Ready: %u\\n\", reg.ready);\n    printf(\"Interrupt Enable: %u\\n\", reg.interrupt_enable);\n    printf(\"Read: %u\\n\", reg.read);\n    printf(\"Write: %u\\n\", reg.write);\n\n    // \u6253\u5370\u5bc4\u5b58\u5668\u7684\u4e8c\u8fdb\u5236\u8868\u793a\n    unsigned int reg_value;\n    // \u901a\u8fc7\u5185\u5b58\u62f7\u8d1d\u5c06\u7ed3\u6784\u4f53\u5185\u5bb9\u590d\u5236\u5230\u4e00\u4e2a\u6807\u51c6\u7c7b\u578b\u4e2d\n    memcpy(&amp;reg_value, &amp;reg, sizeof(reg_value));\n\n    printf(\"Control Register (in binary): \");\n    for (int i = 15; i &gt;= 0; i--) {\n        printf(\"%d\", (reg_value &gt;&gt; i) &amp; 1);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n</code></pre> \u8bf4\u660e\uff1a  1. \u4e00\u4e2a\u5b57\u6bb5\u53ea\u80fd\u5728\u540c\u4e00\u4e2a\u6574\u6570\u5b57\u4e2d\uff0c\u5373\u9650\u5236\u5b57\u6bb5\u4e0d\u80fd\u8de8 \u8d8a\u6574\u6570\u5b57\u7684\u8fb9\u754c\u3002\u5982\u679c\u5269\u4f59\u7684\u4f4d\u592a\u5c11\u4e0d\u591f\u4e0b\u4e00\u4e2a\u5b57\u6bb5\u65f6\uff0c \u4e0b\u4e00\u4e2a\u5b57\u6bb5\u5c06\u5360\u7528\u4e0b\u4e00\u4e2a\u6574\u6570\u5b57\u3002  2. \u5b57\u6bb5\u53ef\u4ee5\u4e0d\u547d\u540d\uff0c\u79f0\u4f5c\u65e0\u540d\u5b57\u6bb5\uff0c\u4f46\u65e0\u540d\u5b57\u6bb5\u4ec5\u7528\u4e8e \u586b\u5145\u3002  3. \u4f7f\u7528\u5b57\u6bb5\u65f6\uff0c\u8981\u6ce8\u610f\u5177\u4f53\u673a\u5668\u5206\u914d\u5b57\u6bb5\u7684\u65b9\u5411\uff0c\u6709\u7684 \u4ece\u5de6\u5411\u53f3\uff0c\u4e5f\u6709\u7684\u4ece\u53f3\u5411\u5de6\u3002  4. \u4e0d\u80fd\u5bf9\u5b57\u6bb5\u65bd\u53d6\u5730\u5740\u8fd0\u7b97(&amp;)\u3002</p>"},{"location":"section2/24-fall-C-programming/#ex9-enum","title":"Ex.9 Enum","text":"<p><pre><code>#include &lt;stdio.h&gt; \n\nenum gender{MALE, FEMALE};\n\nint main () {\n     enum gender g;\n     g = MALE;\n     //\u7f16\u8bd1\u65f6\u6309\u71670\uff0c 1 \u7ed9\u679a\u4e3e\u5e38\u91cf\u8d4b\u503c\uff0c\u800c\u7a0b\u5e8f\u4e0d\u80fd\u7ed9\u4ed6\u8d4b\u503c\u3002\n     //\u4f46\u662f\u53ef\u4ee5 enum gender{MALE = 1, FEMALE}\u8fd9\u6837FEMALE\u662f2\n     //\u679a\u4e3e\u53d8\u91cf\u4e0e\u5e38\u91cf\u6216\u6574\u6570\u53ef\u4ee5\u505a\u5173\u7cfb\u6bd4\u8f83\u3002\n     //\u6574\u6570\u53ef\u4ee5\u8d4b\u503c\u7ed9\u679a\u4e3e\u53d8\u91cf\u4f46\u662f\u4e0d\u80fd\u8d4b\u503c\u7ed9\u679a\u4e3e\u5e38\u91cf\n     g = 1;\n     return 0;\n}\n</code></pre> \u5176\u5b9e\u53ef\u4ee5\u8ba4\u4e3a\u679a\u4e3e\u5e38\u91cf\u5c31\u662f\u4e00\u7cfb\u5217\u6574\u6570\u5e38\u91cf\u3002</p>"},{"location":"section2/24-fall-C-programming/#ex10-typedef","title":"Ex.10 Typedef","text":"<pre><code>#include &lt;stdlib.h&gt;\n\ntypedef int INTEGER;\n\ntypedef struct stt{\n    int num;\n    char name[20];\n    int score;\n}STDTYPE;\n\nSTDTYPE std1;\nstruct stt std2;\n\ntypedef int INTARRAY[20];\n\ntypedef enum{RED,YELLOW}COLOR;\n\nINTARRAY v1;\nCOLOR c1;\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex11-variance-definition","title":"Ex.11 Variance definition","text":"<pre><code>//\u5b58\u50a8\u7c7b\nauto register extern static \u7f3a\u7701\n\n//\u7c7b\u578b\u9650\u5b9a\n\u7c7b\u578b\u540d \uff0c typedef \uff0c typedef \u7c7b\u578b\u540d\nint\ntypedef int INT\ntypedef struct {\n\n}a_struct;\n\n//\u9759\u6001\u53d8\u91cf\u6216\u8005\u5168\u5c40\u53d8\u91cf\uff0c\u81ea\u52a8\u521d\u503c0.\n//\u5bf9\u7ed3\u6784\u6216\u8005\u6570\u7ec4\uff0c\u7528\u521d\u503c\u8868\uff0c\u6bd4\u6210\u4efd\u4e2a\u6570\u591a\u9519\u8bef\uff0c\u5c11\u75280 \u586b\u8865\n</code></pre>"},{"location":"section2/24-fall-C-programming/#pointer","title":"Pointer","text":""},{"location":"section2/24-fall-C-programming/#ex1-basics","title":"Ex.1 Basics","text":"<p>\u5730\u5740\u4e00\u822c\u662f\u5341\u516d\u8fdb\u5236\u65e0\u7b26\u53f7\u6574\u6570\u3002 &amp; is an address operator  \u53ea\u6709\u5168\u5c40\u6216\u8005\u9759\u6001\u624d\u4f1a\u8d4b\u503c\u521d\u503cNULL \u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u53ea\u80fd\u6307\u5411\u540c\u4e00\u4e2a\u7c7b\u578b\u7684\u53d8\u91cf\u3002 <pre><code>//\u5b9a\u4e49\u548c\u95f4\u63a5\u5f15\u7528\u6307\u9488\u53d8\u91cf\u7684\u65f6\u5019* \u7684\u542b\u4e49\u4e0d\u540c\uff0c\u6bd4\u5982\nint i, *ip = &amp;i;\n    //ip\u88ab\u8d4b\u503c\uff0c\u4e00\u4e2a\u5730\u5740\n* ip = i;\n//\u8fd9\u91cc\u662f\u4e00\u4e2a\u503c\n\n\n\n//\u8fd0\u7b97\u987a\u5e8f\uff0c\u5355\u76ee\u8fd0\u7b97\u7b26*\uff0c &amp;\uff0c ++\uff0c -- \u662f\u4ece\u53f3\u5411\u5de6\u7ed3\u5408\u7684\u3002\n\nint i, j, *ip = &amp; i;\n\nj == ++*ip\n//i++ \u4ee5\u540e\u8d4b\u7ed9j\n\nj = *ip ++;\n//ip++ \u4f46\u662f\u8fd4\u56de\u503c\u662fip\uff0c \u6240\u4ee5j\u53d8\u6210i\uff0c\u4f46\u662fip\u4e0d\u518d\u662fi\uff1b\n\nj = (*ip)++\n//j = i ;\n//i++\n</code></pre></p>"},{"location":"section2/24-fall-C-programming/#ex-2-array-and-pointer","title":"Ex. 2 array and pointer","text":"<pre><code>int a[100], *p;\np = &amp;a[0];\n\n//p\u662fa[0]\u7684\u5730\u5740\n\n//\u5f53\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c \u8fd9\u4e24\u4e2a\u6307\u9488\u7684\u5173\u7cfb\u6bd4\u8f83\u5c31\u6709\u610f\u4e49.\n\nint* p = &amp;a[0];\nint* q = &amp;a[1];\n\np &lt; q is true\n\n//\u6307\u9488\u8fdb\u884c\u52a0\u51cf\u8fd0\u7b97\n\np = &amp;a[0];\n*(p + 1) \u5c31\u662f a[1] \n\nint a[100], b[100], *p, *q;\nfor (p = a; p &lt; a + 100; ) {\n    scanf(\"%d\", p++);\n}\n\nfor (p = a, q = b; p &lt; a+100){\n    *q++= *p++;\n}\n\n//\u8fd9\u91cc\u7684a, b\u662f\u4ec0\u4e48\uff1f\n//\u662f\u4ee3\u8868\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u662f\u6307\u9488\uff0c\u662f\u5e38\u91cf\u3002\n\n\n//\u5b57\u7b26\u4e32\u6307\u9488\n//\u6ce8\u610f\uff0c \u5b57\u7b26\u4e32\u9700\u8981\u7ed3\u675f\u7b26\u3002\n\nchar s[] = \"I am a string.\";\n//\u5176\u5b9es\u670915\u4e2a\u5143\u7d20\uff0c\u5305\u62ec\u6700\u540e\u7684'\\0'\n\n\n//\u6ce8\u610f\uff0c\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u7279\u6b8a\u5199\u6cd5\uff0c\u53ef\u4ee5\u628a\u5b57\u7b26\u4e32\u5e38\u91cf\u8d4b\u503c\u7ed9\u5b57\u7b26\u6307\u9488\n\nchar *cp1, *cp2 = \"I am a string\";\n\ncp1 = \"Another string\";\n//\u4f46\u662f\uff0c \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u4e0d\u80fd\u4fee\u6539\n*cp = 'a';\n\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\n\nchar s[] = \"Anotehr\";\nchar* p = s;\n\u8fd9\u6837\u53ef\u4ee5\u4fee\u6539\n\nprintf(\"%s\",s);\n\u540c\u65f6\u4e5f\u9002\u7528\u4e8ep, \u4ecep\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8f93\u51fa\u5230\\0\n\n\n//copy a string, where from is a first pointer of a string ,to is what we gonna copy to\n\nwhile(*to++ = *from++);\n\n//\u628as\u4e2d\u67d0\u4e2a\u5b57\u7b26\u53bb\u6389\n//\u53cc\u6307\u9488\n\nchar* p , *q = s;\n\nwhile (*p){\n    if (*p != target) {\n        *q = *p;\n        q++;\n    }\n    p++;\n}\n\n*q = '\\0';\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-3-pointer-as-parameter","title":"Ex. 3 pointer as parameter","text":"<p>\u666e\u901a\u53d8\u91cf(variable) \u6309\u503c\u8c03\u7528 \u6307\u9488\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u6309\u5730\u5740\u8c03\u7528</p>"},{"location":"section2/24-fall-C-programming/#ex-4-array-parameter","title":"Ex. 4 array parameter","text":"<pre><code>int sum(int a[], int n){\n    int i, s;\n    for (s = i = 0; i &lt; n; i++){\n    s += a[i];\n    }\n    return s;\n}\n\n//\u4e00\u822c\u6765\u8bf4\uff0c\u5f62\u53c2a\u88ab\u4f20\u5165\u4e86\u4e00\u4e2a\u6570\u7ec4\u7684\u9996\u5730\u5740.\nint x[] = {1, 2, 3, 4, 5};\nint i, j;\ni = sum(x, 5);\nj = sum(&amp;x[2], 3);\n\n//\u4e00\u822c\u9700\u8981\u4e00\u4e2a\u6574\u6570\u8868\u793asize\n\n//\u6570\u7ec4\u5f62\u53c2\u4e5f\u53ef\u4ee5\u662f\u591a\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u5f62\u53c2\u591a\u7ef4\uff0c\u9664\u4e86\u7b2c\u4e00\u7ef4\u53ef\u4ee5\u4e0d\u6307\u5b9a\u5927\u5c0f\uff0c\u5176\u4ed6\u90fd\u8981\u660e\u786e\u5236\u5b9a\u3002\n\nvoid sumAToB(int a[][10], int b[], int n){\n    int i, j;\n    for (i = 0; i &lt; n; i++){\n        for (b[i] = 0, j = 0; j &lt; 10; j++){\n        b[i] += a[i][j];\n        }\n    }\n}\n\n//\u6ce8\u610f\u4ee5\u4e0b\u8fd9\u51e0\u79cd\u5f62\u53c2\u7684\u5199\u6cd5\nvoid test(int** a)\n\n\u8fd9\u91cc\u4e0d\u80fd\u4f20\u5165\u6570\u7ec4\u6bd4\u5982a[10][10]\u7684a\n\u5fc5\u987bmalloc\n\nvoid test(int a[][10])\n\u5219\u53ef\u4ee5\u3002\n\n\u4f46\u662f\u5982\u679c\u662f\u7b80\u5355\u7684\u4e00\u7ef4\u6570\u7ec4\nvoid test(int* a)\nint a[10] = {0};\n\u53ef\u4ee5\u4f20\u5165a\n</code></pre> <pre><code>//the maximum element in an array\n\nint maxInArray(int a[], int n){\n    int i, m = 0;\n    for (i = 1; i &lt; n; i++){\n        if (a[m] &lt; a[i]){\n             m = i;\n        }\n    }\n    return a[m];\n}\n</code></pre> <pre><code>//strcpy\nvoid strcpy(char* to, char* from) {\n    while(*to++ = *from++);\n}\n//\u8fd9\u91cc\u53ef\u4ee5\u628a'\\0'\u4e5f\u4e00\u8d77cpy\n</code></pre> <pre><code>//strcmp\nint my_strcmp(char* s, char* t){\n    while(*s ++ == *t ++){\n        if(*s == '\\0'){\n            return 0;\n        }\n    }\n    return (int)(*s - *t);\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex5-pointer-array","title":"Ex.5 pointer array","text":"<pre><code>int *p[10];\n//10\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e00\u4e2a\u90fd\u662f\u53ef\u4ee5\u6307\u5411\u6574\u6570\u7684\u6307\u9488\n\n//\u6ce8\u610f\uff0c\u4e0b\u9762\u7684p\u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e8c\u7ef4\u6570\u7ec4\nint (*p)[10];\n\nint a[3][10]= {1};\np = a;\n\n\nint a, b, c;\nint* ap[] = {&amp;a, &amp;b, &amp;c};\nfor (k = 0; k &lt; 3;k ++) {\n    printf(\"%d\\t\", *ap[k]);\n    //\u6216\u8005**(ap + k)\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt; \n#define N sizeof ap/sizeof ap[0] \n/* \u6574\u4e2a\u6570\u7ec4\u5360\u7528\u7684\u5b57\u8282\u6570\u00f7\u4e00\u4e2a\u5143\u7d20\u5360\u7528\u7684\u5b57\u8282\u6570 \u5f97\u5230\u8be5\u6570\u7ec4\u6709\u591a\u5c11\u4e2a\u5143\u7d20 */ \nint a, b, c, d, e, f; \nint main() { \n    int *ap[ ] = { &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f }; \n    int k, j, t; \n    printf ( \"Enter a, b, c, d, e, f.\\n\" ); \n    for ( k = 0; k &lt; N; k++ ) \n        scanf( \"%d\",ap[k] ); \n    for ( k = 0; k &lt; N; k++ ){\n        for ( j = 0; j &lt; N - k - 1; j++){\n            if(*ap[j] &gt; *ap[j+1]){\n                t = *ap[j];\n                *ap[j] = *ap[j+1];\n                *ap[j+1} = t;\n            /*\n            int* t = ap[j];\n            ap[j] = ap[j + 1];\n            ap[j+1] = t;\n            */\n            }\n        }\n    for (k = 0; k &lt; N; k++)\n        printf(\"%d\\t\", *ap[k]);\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-6-function-pointer-and-function-which-return-a-pointer","title":"EX. 6 function pointer and function which return a pointer","text":"<pre><code>int *f(int x, int y)\n// a function that return an int pointer\nint (*f)(int x, int y)\n// f is a pointer that points at a function\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-7-string-and-pointer","title":"Ex. 7 string and pointer","text":"<pre><code>//\u9996\u5148\uff0c \u5b57\u7b26\u4e32\u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f\nchar* s1 = \"string\";\nchar s2[] = \"string\";\n\n//\u8fd9\u91ccs1\u662f\u6307\u5411\u9996\u5b57\u6bcd\u7684\u6307\u9488\uff0cs2\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\n//\u4f46\u662f\n*s1 == 's';\n*s2 == 's';\n//\u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u6570\u7ec4\u81ea\u8eab\u72ec\u7acb\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u628a\u5b57\u7b26\u6570\u7ec4\u81ea\u52a8\u8f6c\u6362\u6210\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u7684\u6307\u9488\n//s1 = s2\u4e5f\u662f\u53ef\u4ee5\u7684\n\n//\u90a3\u5b57\u7b26\u6307\u9488\u53ef\u4e0d\u53ef\u4ee5\u770b\u4f5c\u5b57\u7b26\u6570\u7ec4\u5462\uff1f\u67d0\u79cd\u610f\u4e49\u4e0a\u53ef\u4ee5\n(s1 + i)[0] == s1[i] == s2[i]\n\ns1++;\n//\u73b0\u5728s1\u6307\u5411't'\ns2++;\n//\u62a5\u9519\uff0c\u4e0d\u80fd\u4fee\u6539\u5b57\u7b26\u6570\u7ec4\n\nchar** p1 = &amp;s1;\n//p1\u662fs1\u7684\u5730\u5740\uff0c\u5c31\u662f\u9996\u5b57\u6bcd\u7684\u6307\u9488\u7684\u6307\u9488\nchar (*p2)[7] = &amp;s2;\n//p2\u662f\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\nchar** p3 = &amp;s2;\n//\u62a5\u9519\uff0c\u5bf9\u5b57\u7b26\u6570\u7ec4\u53d6\u5730\u5740\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u800c\u975echar**\n\np1++;\n//\u73b0\u5728p1\u6307\u5411s1\u7684\u5730\u5740\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\uff0c\u5177\u4f53\u4e0d\u77e5\u9053\n(*p1)++;\n//s1\u88ab++\uff0cp1\u8fd8\u662f\u6307\u5411\u9996\u5b57\u6bcd\u7684\u5730\u5740\n(*p2)[0]\n//\u8fd9\u4e2a\u4e1c\u897f\u662f's'\n\n//\u73b0\u5728\u5199\u4e00\u4e2a\u51fd\u6570\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\n\nvoid swap_string(char* s1, char s2[]){\n    char* tmp = s1;\n    s1 = s2;\n    //\u62a5\u9519\uff0c\u5b57\u7b26\u6570\u7ec4\u4e0d\u80fd\u8d4b\u503c\u7ed9\u5b57\u7b26\u6307\u9488\n    s2 = tmp;\n    //\u62a5\u9519\uff0c\u5b57\u7b26\u6307\u9488\u4e0d\u80fd\u8d4b\u503c\u7ed9\u5b57\u7b26\u6570\u7ec4\n}\n\n//\u5e94\u8be5\u5148\u628as2\u53d8\u5f97\u53ef\u4ee5\u4fee\u6539\nchar* s2p = s2;\nvoid swap_string(char* s1, char* s2){\n    char* tmp = s1;\n    s1 = s2;\n    s2 = tmp;\n}\nswap(s1, s2p);\n//\u4f46\u662f\u6ca1\u4ec0\u4e48\u5375\u7528\uff0c\u56e0\u4e3a\u51fd\u6570\u5b9e\u53c2\u7ed9\u5f62\u53c2\u662f\u503c\u4f20\u9012\n\n//\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\uff1a\u5148\u7ed9\u5f62\u53c2\u5206\u914d\u7a7a\u95f4\uff0c\u5728\u628a\u5b9e\u53c2\u7684\u503c\u4f20\u8fdb\u6765\uff0c\u64cd\u4f5c\u4e00\u6ce2\uff0c\u8fd4\u56de\uff0c\u6700\u540e\u91ca\u653e\u6389\u7a7a\u95f4\n//\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91ccs1,s2p\u6ca1\u6709\u88ab\u4fee\u6539\n\nvoid swap_string(char** s1pp,char** s2pp){\n    char* tmp = *s1pp;\n    *s1pp = *s2pp;\n    *s2pp = tmp;\n}\n//\u624d\u662f\u5bf9\u7684\nswap_string(&amp;s1, &amp;s2pp);\n</code></pre>"},{"location":"section2/24-fall-C-programming/#function","title":"Function","text":""},{"location":"section2/24-fall-C-programming/#ex-1-basics","title":"Ex. 1 Basics","text":""},{"location":"section2/24-fall-C-programming/#ex2-library-function","title":"Ex.2 Library function","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt; \n\nint main(){\n    int k;\n    long long now;]\n    srand(time(&amp;now));\n    // srand(time(NULL));\n    for (k = 0; k &lt; 10; k++) {\n        printf(\"%d\\n\", rand()% 10);\n    }\n    return 0;\n}\n</code></pre> <pre><code>int majorityElement(int* nums, int numsSize) {\n    srand(time(NULL));\n\n    while (1){\n        int cur = nums[rand() % (numsSize)];\n        int cnt = 0;\n    for (int n = 0 ; n &lt; numsSize; n++){\n        if (nums[n] == cur) cnt++;\n        }\n    if (cnt &gt; numsSize / 2) return cur;\n    }\n    return -1;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-3-function-definition","title":"Ex. 3 function definition","text":"<pre><code>//gcd\n\nint gcd(int a, int b){\n    if (a == b) return b;\n    return a &gt; b ? gcd(b, a - b) : (a, b - a);\n// gcd(a, b) = gcd(min , max - min);\n\n}\n\nint gcd(int a, int b) {\n    int r;\n    while(r = a % b){\n        a = b;\n        b = r;\n    }\n    return b;\n}\n\nint gcd(int a, int b) {\n    if (a == 0) return b;\n    return gcd(b, a % b);\n}\n\n//\u5b9e\u53c2\u4f20\u5230\u5f62\u53c2\u662f\u5355\u5411\u503c\u4f20\u9012\n\n//C\u8bed\u8a00\u51fd\u6570\uff08\uff09\u91cc\u7684\u5b9e\u53c2\u6c42\u503c\u987a\u5e8f\u5e76\u4e0d\u786e\u5b9a\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-4-function-forward-declaration","title":"Ex. 4 Function forward declaration","text":"<pre><code>double min(double, double);\n//or double min (double a, double b)\nint main(){\n}\n\n\ndouble min(double a, double b){\n\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex5-recursion","title":"Ex.5 Recursion","text":"<p><pre><code>\u6ce8\u610f\u9012\u5f52\u8c03\u7528\u7684\u6df1\u5ea6\u95ee\u9898\uff0c\n</code></pre> fib</p>"},{"location":"section2/24-fall-C-programming/#ex6-sort","title":"Ex.6 Sort","text":"<p>\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f \u6392\u5e8f\u3001\u58f3\u6392\u5e8f\uff08shellsort\uff09\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u6392\u5e8f\u2026  \u57fa\u4e8e\u975e\u9009\u62e9\u7684\u6392\u5e8f \u8ba1\u6570\u6392\u5e8f\u3001\u6876\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f\uff08radix sort\uff09\u2026 <pre><code>//bubble sort\nvoid bubble(int* list, int n) {\n    for(int i = 0 ; i &lt; n; i++){\n        bool swapped = false;\n        //\u63d0\u524d\u9000\u51fa\u673a\u5236\n        for (int j = 0 ; j &lt; n - i - 1; j++){\n            if(list[j] &gt; list[j + 1]){\n                 int temp = list[j];\n                 list[j] = list[j + 1];\n                list[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        if(!swapped) break;\n    }\n}\n\n//selection sort\nvoid selection(int* list, int n) {\n    for (int i = 0 ; i &lt; n - 1; i++){\n        for(int j = i + 1; j &lt; n; j++){\n            if (list[j] &lt; list[i]){\n                int temp = list[j];\n                list[j] = list[i];\n                list[i] = temp;\n            }\n        }\n    }\n}\n\n// insertion sort\nvoid insertionSort(int* list, int n) { \n    for (int i = 1; i &lt; n; i++) { \n        int key = list[i]; \n        // \u5f53\u524d\u5f85\u63d2\u5165\u7684\u5143\u7d20 \n        int j = i - 1; \n        // \u5c06\u5df2\u6392\u5e8f\u90e8\u5206\u5927\u4e8e key \u7684\u5143\u7d20\u79fb\u52a8\u5230\u540e\u9762 \n        while (j &gt;= 0 &amp;&amp; list[j] &gt; key) { \n            list[j + 1] = list[j]; \n            // \u79fb\u52a8\u5143\u7d20 \n            j--; \n            } \n        // \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5c06 key \u63d2\u5165 \n            list[j + 1] = key; \n        } \n    }\n}\n// shell sort\nvoid shellSort(int* arr, int n) {\n    // \u521d\u59cb\u589e\u91cf\u8bbe\u7f6e\u4e3a n/2\uff0c\u6bcf\u6b21\u51cf\u534a\n    for (int gap = n / 2; gap &gt; 0; gap /= 2) {\n        // \u63d2\u5165\u6392\u5e8f\uff0cgap \u8868\u793a\u95f4\u9694\n        for (int i = gap; i &lt; n; i++) {\n            int temp = arr[i];\n            int j = i;\n\n            // \u5c06 arr[i] \u63d2\u5165\u5230\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5b50\u5e8f\u5217\u4e2d\n            while (j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp) {\n                arr[j] = arr[j - gap];\n                j -= gap;\n            }\n\n            arr[j] = temp;\n        }\n    }\n}\n\n//merge sort\n\n// \u5408\u5e76\u4e24\u4e2a\u5df2\u6392\u5e8f\u7684\u5b50\u6570\u7ec4\nvoid merge(int* arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    // \u521b\u5efa\u4e34\u65f6\u6570\u7ec4\n    int* L = (int*)malloc(n1 * sizeof(int));\n    int* R = (int*)malloc(n2 * sizeof(int));\n\n    // \u5c06\u6570\u636e\u590d\u5236\u5230\u4e34\u65f6\u6570\u7ec4 L[] \u548c R[]\n    for (int i = 0; i &lt; n1; i++) {\n        L[i] = arr[left + i];\n    }\n    for (int j = 0; j &lt; n2; j++) {\n        R[j] = arr[mid + 1 + j];\n    }\n\n    // \u5408\u5e76\u4e34\u65f6\u6570\u7ec4 L \u548c R \u56de\u539f\u6570\u7ec4 arr\n    int i = 0, j = 0, k = left;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (L[i] &lt;= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // \u5982\u679c\u8fd8\u6709\u5269\u4f59\u5143\u7d20\u5728 L \u4e2d\uff0c\u62f7\u8d1d\u5230 arr\n    while (i &lt; n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // \u5982\u679c\u8fd8\u6709\u5269\u4f59\u5143\u7d20\u5728 R \u4e2d\uff0c\u62f7\u8d1d\u5230 arr\n    while (j &lt; n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n\n    // \u91ca\u653e\u4e34\u65f6\u6570\u7ec4\n    free(L);\n    free(R);\n}\n\n// \u9012\u5f52\u5730\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\nvoid mergeSort(int* arr, int left, int right) {\n    if (left &lt; right) {\n        int mid = left + (right - left) / 2;\n\n        // \u9012\u5f52\u6392\u5e8f\u5de6\u534a\u90e8\u5206\n        mergeSort(arr, left, mid);\n\n        // \u9012\u5f52\u6392\u5e8f\u53f3\u534a\u90e8\u5206\n        mergeSort(arr, mid + 1, right);\n\n        // \u5408\u5e76\u6392\u5e8f\u597d\u7684\u5de6\u53f3\u90e8\u5206\n        merge(arr, left, mid, right);\n    }\n}\n\n\nint partition(int* arr, int low, int high) {\n    int pivot = arr[high];  // \u9009\u62e9\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\n    int i = low - 1;  // i \u662f\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5b50\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\n\n    // \u904d\u5386\u6570\u7ec4\uff0c\u6309\u57fa\u51c6\u5206\u533a\n    for (int j = low; j &lt; high; j++) {\n        if (arr[j] &lt;= pivot) {\n            i++;  // \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u51c6\uff0ci \u589e\u52a0\n            // \u4ea4\u6362 arr[i] \u548c arr[j]\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    // \u5c06\u57fa\u51c6\u5143\u7d20\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n\n    return i + 1;  // \u8fd4\u56de\u57fa\u51c6\u5143\u7d20\u7684\u7d22\u5f15\n}\n\n// \u5feb\u901f\u6392\u5e8f\u51fd\u6570\nvoid quickSort(int* arr, int low, int high) {\n    if (low &lt; high) {\n        // \u5bf9\u5206\u533a\u540e\u7684\u6570\u7ec4\u9012\u5f52\u6392\u5e8f\n        int pi = partition(arr, low, high);  // \u57fa\u51c6\u5143\u7d20\u7684\u7d22\u5f15\n\n        // \u9012\u5f52\u5bf9\u57fa\u51c6\u5143\u7d20\u5de6\u4fa7\u548c\u53f3\u4fa7\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n</code></pre></p>"},{"location":"section2/24-fall-C-programming/#ex-7-exercises","title":"Ex. 7 Exercises","text":"<p>hanoi <pre><code>//Hanoi tower problem;\n#include &lt;stdio.h&gt;\n//solve the problem from a to b, via c;\nvoid hanoi(int n, char a, char b, char c, int* cnt){\n    if (n == 1) {\n        move(n, a, b);\n        return;\n    }\n    hanoi(n - 1, a, c, b);\n    move(n, a, b, cnt);\n    hanoi(n - 1, c, a, b);\n}\n\nvoid move(int n, char a, char b,int* cnt) {\n    printf (\"Oper %d : Move disk %d from %c to %c.\\n\", cnt, n, a, b);\n    (*cnt)++;\n}\n\nint main(){\n    hanoi(10, 'A', 'B', 'C', &amp;0);\n    return 0;\n}\n</code></pre></p> <pre><code>//calculate C(n, m);\nlong long com(int n , int m){\n    if(m == 0) return 1;\n    if(n == m) return 1;\n    return com(n - 1, m) + com(n - 1, m - 1);\n}\n</code></pre> <pre><code>//palindrome\n\nint palindrome(int n) {\n    int m , s;\n    m = n;\n    s = 0;\n    while (m){\n        int temp = m % 10;\n        m /= 10;\n        s = s * 10 + temp;\n    }\n    return s == n;\n}\n</code></pre> <pre><code>//quickpow\n//normally we consider a big prime as module\nint power(int x, int y){\n    if (y == 1) return x;\n    if (y % 2 == 0){\n        int j = power(x, y / 2);\n        return j * j;\n    }\n    else {\n        return x * power(x , y - 1);\n    }\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-8-storage-type-and-scope","title":"Ex. 8 Storage type and scope","text":"<p>\u6807\u8bc6\u7b26\u7684\u5c5e\u6027\uff0c\u5b58\u50a8\u7c7b\u522b\uff0c \u5b58\u50a8\u671f\uff0c \u4f5c\u7528\u57df\u7b49\uff1b</p>"},{"location":"section2/24-fall-C-programming/#storage-class","title":"storage class","text":"<p>auto  , register, extern , static</p> <p>A storage class in C is used to describe the following things: 1. The variable scope. 2. The location where the variable will be stored. 3. The initialized value of a variable. 4. A lifetime of a variable. 5. Who can access a variable.</p> Storage class Purpose auto It is a default storage class. extern It is a global variable. static It is a local variable which is capable of returning a value even when control is transferred to the function call. register It is a variable which is stored inside a Register. \u5b58\u50a8\u7c7b \u4f5c\u7528\u57df \u751f\u547d\u5468\u671f \u521d\u59cb\u5316 \u7279\u70b9 <code>auto</code> \u4ec5\u5728\u5c40\u90e8\u51fd\u6570\u4e2d\u6709\u6548 \u4ec5\u5728\u51fd\u6570\u8c03\u7528\u671f\u95f4\u6709\u6548 \u672a\u521d\u59cb\u5316\u65f6\u672a\u5b9a\u4e49 \u9ed8\u8ba4\u5b58\u50a8\u7c7b\uff0c\u53d8\u91cf\u5b58\u50a8\u5728\u6808\u4e2d <code>register</code> \u4ec5\u5728\u5c40\u90e8\u51fd\u6570\u4e2d\u6709\u6548 \u4ec5\u5728\u51fd\u6570\u8c03\u7528\u671f\u95f4\u6709\u6548 \u672a\u521d\u59cb\u5316\u65f6\u672a\u5b9a\u4e49 \u5efa\u8bae\u5c06\u53d8\u91cf\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u4e0d\u80fd\u53d6\u5730\u5740 <code>static</code> \u5c40\u90e8\uff1a\u4ec5\u5728\u5f53\u524d\u51fd\u6570\u5185\u6709\u6548\uff0c \u5168\u5c40\uff1a\u4ec5\u5728\u5f53\u524d\u6587\u4ef6\u5185\u6709\u6548 \u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u6709\u6548 \u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a\u96f6 \u4fdd\u6301\u53d8\u91cf\u503c\uff0c\u5c40\u90e8\u53d8\u91cf\u4fdd\u7559\u503c\uff0c\u9759\u6001\u5168\u5c40\u53d8\u91cf\u53ea\u80fd\u5728\u5f53\u524d\u6587\u4ef6\u8bbf\u95ee <code>extern</code> \u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u6709\u6548 \u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u6709\u6548 \u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a\u96f6 \u7528\u4e8e\u8de8\u6587\u4ef6\u5171\u4eab\u53d8\u91cf\u6216\u51fd\u6570 \u5c40\u90e8\u9ed8\u8ba4auto\uff0c \u5168\u5c40\u9ed8\u8ba4extern\u3002 static \u5168\u5c40\uff0c \u5f53\u524d\u6587\u4ef6\u6709\u6548\u3002 static\u5c40\u90e8\uff0c\u8fd9\u4e2a\u53d8\u91cf\u8fd8\u662f\u53ea\u80fd\u5728\u5f53\u524d\u51fd\u6570\u8bbf\u95ee\uff0c\u4f46\u662f\u6267\u884c\u5b8c\u4e0d\u4f1a\u88ab\u91ca\u653e\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u4e00\u6b21\u6267\u884c\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u3002"},{"location":"section2/24-fall-C-programming/#scope","title":"scope","text":"<p>\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u5f15\u7528\u8be5\u6807\u8bc6\u7b26\u7684\u533a\u57df \u5168\u5c40\u53d8\u91cfscope\u4ece\u58f0\u660e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f \u5c40\u90e8\u4ee3\u7801\u5757\u5148\u627e\u6700\u8fd1\u7684\u53d8\u91cf\uff0c\u4ece\u5185\u5230\u5916\u3002\u4f46\u662f\u4e0d\u4f1a\u53bb\u540c\u5c42\u7684\u53e6\u5916\u7684\u4ee3\u7801\u5757\u3002</p>"},{"location":"section2/24-fall-C-programming/#linkage","title":"linkage","text":"<p>\u80fd\u88ab\u591a\u4e2a\u8fd8\u662f\u53ea\u80fd\u88ab\u5f53\u524d\u7684\u6587\u4ef6\u8bc6\u522b\uff1f</p>"},{"location":"section2/24-fall-C-programming/#\u81ea\u52a8\u5b58\u50a8\u671f\u548c\u9759\u6001\u5b58\u50a8\u671f","title":"\u81ea\u52a8\u5b58\u50a8\u671f\u548c\u9759\u6001\u5b58\u50a8\u671f","text":"<p>auto register /////   static extern</p> <p>Notice\uff1a \u51fd\u6570\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\uff0c\u4e5f\u8981\u4e8b\u5148\u58f0\u660e</p> <p>extern \u58f0\u660e\u4ee5\u540e\uff0c \u51fd\u6570\u7684\u5b9a\u4e49\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff0c \u5305\u62ec\u522b\u7684\u6587\u4ef6</p> <p>static \u5168\u5c40\u53d8\u91cf\u548c static\u5c40\u90e8\u53d8\u91cf\u6709\u7740\u4e0d\u540c\u7684\u542b\u4e49</p> <p>\u524d\u8005\u8868\u793a\u9650\u5b9a\u8be5\u6587\u4ef6 \u540e\u8005\u8868\u793a\u751f\u547d\u5468\u671f\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0cscope\u4e0d\u53d8 \u4f46\u662f\u90fd\u4f1a\u9ed8\u8ba4\u521d\u59cb\u53160\u3002</p>"},{"location":"section2/24-fall-C-programming/#\u5982\u4f55\u8de8\u6587\u4ef6\u4f7f\u7528extern\u53d8\u91cf","title":"\u5982\u4f55\u8de8\u6587\u4ef6\u4f7f\u7528extern\u53d8\u91cf","text":"<p>\u901a\u5e38\uff0c \u4e00\u4e2a\u6587\u4ef6\u91cc\u5b9a\u4e49\uff0c \u4e00\u4e2a\u6587\u4ef6\u91cc\u58f0\u660e \u7f16\u8bd1\u65f6\u4e00\u8d77\u7f16\u8bd1\u6210\u4e00\u4e2aexe</p>"},{"location":"section2/24-fall-C-programming/#ex-9-preprocessing-directives","title":"Ex. 9 preprocessing directives","text":"<p>\u5b8f\u5b9a\u4e49\uff0c \u6587\u4ef6\u5305\u542b\uff0c \u6761\u4ef6\u7f16\u8bd1\uff0c \u884c\u63a7\u5236\u3002</p> <p>\u4ee5#\u5f00\u5934</p> <pre><code>#define int long long \n#define TRUE 1\n#define NL printf(\"\\n\")\n#undef NL\n//\u65b0\u7684\u5b8f\u5b9a\u4e49\u53ef\u4ee5\u5f15\u7528\u524d\u9762\u7684\uff01\uff01\uff01\uff01\uff01\n//\u5b8f\u5b9a\u4e49\u4e00\u884c\u5199\u4e0d\u4e0b\u600e\u4e48\u529e\n#define SWAPXY {int t = x; x = y;\\\ny=t;}\n//\u56de\u8f66\u7d27\u8ddf\u5728\\\u540e\u9762\n\n\n//\u5e26\u5f62\u53c2\u7684\u5b8f\u5b9a\u4e49\n\n#define MAX(A,B) ((A) &gt; (B) ? (A) : (B))\ny = MAX(p + q, u + v);\n//\u4f1a\u88ab\u5bf9\u5e94\u66ff\u6362\n//Notice : \u6807\u8bc6\u7b26\u548c\u5de6\u8fb9\u5706\u62ec\u53f7\u4e4b\u95f4\u7d27\u8ddf\uff0c\u5426\u5219\u5f62\u6210\u4e0d\u4e86\u5e26\u53c2\u6570\u5b8f\u5b9a\u4e49\n//\u5b8f\u8c03\u7528\u65f6\uff0c\u4fdd\u8bc1\u53c2\u6570\u4e2a\u6570\u76f8\u540c\n//\u53ea\u4f20\u5b57\u7b26\u4e0d\u8ba1\u7b97\u503c\n#define sq(x) x * x\n\nq = sq(a + b)\nq = a + b * a + b\n//\u6240\u4ee5\u540e\u9762\u8bed\u53e5\u4e00\u822c\u52a0\u4e0a\u62ec\u53f7\n#define sq(x) (x) * (x)\n\n//\u5b8f\u5b9a\u4e49\u53ea\u662f\u66ff\u6362\u5b57\u7b26\n</code></pre> <pre><code>#include &lt;&gt;\n#include \"\"\n//\u4e00\u6b21include\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u6587\u4ef6\n//&lt;&gt;\u88ab\u5305\u542b\u6587\u4ef6\u5e94\u8be5\u5728\u7f16\u8bd1\u7cfb\u7edf\u76ee\u5f55\u4e0b\n//\u201c\u201d\u5148\u627e\u5f53\u524d\u76ee\u5f55\uff0c \u5728\u627e\u7f16\u8bd1\u7cfb\u7edf\u76ee\u5f55\uff0c\u6216\u8005\u76f4\u63a5\u7ed9\u51fa\u8def\u5f84\n//\u4e60\u60ef\u4e0a\uff0c\u628a\u516c\u5171\u7684\u5e38\u91cf\u5b9a\u4e49\uff0c\u51fd\u6570\u58f0\u660e\u548c\u5168\u5c40\u53d8\u91cf\u7684\u5916\u90e8\u8bf4\u660e\u6784\u6210\u4e00\u4e2a\u5934\u6587\u4ef6\u3002\n//\u6bd4\u5982\uff0c \u6211\u5728\u4e00\u4e2a\u5934\u6587\u4ef6\u91cc\u58f0\u660e\u4e86\u82e5\u5e72\u51fd\u6570\uff0c\u5728\u4e00\u4e2a\u6e90\u6587\u4ef6\u91cc\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\u5e76\u4e14\u5b9a\u4e49\u4e86\u8fd9\u4e9b\u51fd\u6570\uff0c\u5219\u5728\u53e6\u4e00\u4e2a\u6e90\u6587\u4ef6\u91cc\uff0c\u5982\u679c\u6211\u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570(\u524d\u63d0\u662f\u8fdb\u884c\u8054\u5408\u7f16\u8bd1)\n//\u4f46\u662f\uff0c\u6807\u51c6\u5e93\u7684\u51fd\u6570\u4f1a\u81ea\u52a8\u8fde\u63a5\uff0c \u4e0d\u9700\u8981\u8054\u5408\u7f16\u8bd1\n</code></pre> <pre><code>file.c \u5305\u542bfile1.h\u548cfile2.h\uff0c 1\u5f15\u75282\uff0c\u5c31\u5e94\u8be5\u53cd\u8fc7\u6765\n#include \"file2.h\"\n#include \"file1.h\"\n</code></pre>"},{"location":"section2/24-fall-C-programming/#\u6761\u4ef6\u7f16\u8bd1","title":"\u6761\u4ef6\u7f16\u8bd1","text":"<pre><code>#ifdef \u6807\u8bc6\u7b26\n    //\u7a0b\u5e8f\u6bb51\n#else\n    //\u7a0b\u5e8f\u6bb52\n#endif\n#ifndef // not def\n#if \u8868\u8fbe\u5f0f\n#elif\n//\u5f53\u6807\u8bc6\u7b26\u5df2\u7ecf\u88ab\u5b9a\u4e49\u5c31\u7f16\u8bd11\uff0c\u5426\u52192\n//\u53ea\u5173\u5fc3\u6709\u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c \u800c\u4e0e\u5b9a\u4e49\u6210\u4ec0\u4e48\u65e0\u5173\n</code></pre> <p>\u5e7f\u6cdb\u8fd0\u7528\u4e8edebug <pre><code>//\u8c03\u8bd5\u72b6\u6001\u4e0bdefine\u4e00\u4e0b, \u8c03\u8bd5\u5b8c\u5c31\u4e0ddefine\uff0c \u8fd9\u6837\u8c03\u8bd5\u5b8c\u5c31\u4e0d\u7528\u6539\u7a0b\u5e8f\u4e86\uff0c \u4ee3\u7801\u5f97\u7559\u7740\n#define DEBUG\n#ifdef DEBUG\n printf(\"a = %d\", a);\n#endif\n</code></pre> \u907f\u514d\u5934\u6587\u4ef6\u91cd\u590d\u5b9a\u4e49 <pre><code>//in finite_field.h\n#ifndef FINITE_FIELD\n#define FINITE_FIELD\n\n#endif\n</code></pre> \u53cd\u4f8b\uff1a \u6211\u5728\u4e00\u4e2a\u5934\u6587\u4ef6\u58f0\u660e\u4e86\u51fd\u6570f1, \u5728\u4e24\u4e2a.c\u6587\u4ef6\u91ccinclude\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u6ca1\u6709\u673a\u5236\uff0c\u867d\u7136\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u8fde\u63a5\u7684\u65f6\u5019\u4f1a\u6709\u95ee\u9898 \u4e8b\u5b9e\u4e0a\uff0c\u65e2\u4e0d\u53ef\u91cd\u590d\u58f0\u660e\uff0c\u4e5f\u4e0d\u53ef\u91cd\u590d\u5b9a\u4e49\u51fd\u6570\u3002 \uff08P.S.\uff1a\u62a5\u4e0d\u62a5\u9519\u548c\u7f16\u8bd1\u5668\u6709\u5173\uff0c\u6bd4\u5982\u6211\u7684gcc\uff0c\u5982\u679c\u5934\u6587\u4ef6\u53ea\u6709\u58f0\u660e\u6ca1\u6709\u5b9a\u4e49\uff0c\u91cd\u590d\u5305\u542b\u4e0d\u62a5\u9519\uff0c\u6709\u5b9a\u4e49\u624d\u62a5\u9519\uff09</p>"},{"location":"section2/24-fall-C-programming/#array","title":"Array","text":""},{"location":"section2/24-fall-C-programming/#ex-1-basics_1","title":"Ex. 1 Basics","text":"<pre><code>//Commonly size of an array cannot be changed or determined by variables.\nint m; \nint arr[m];\n//error in lower versions than C99;\n\n//Initializing one dimension array\nauto int arr[10];\nregister int arr[10];\n\n\nstatic int arr[10];//initialize 0;\nextern int arr[10];//initailize 0;\n\n//more common cases\nint fib[5] = {0, 1, 1, 2, 3};\nint fib[5] = [0, 1, 1];\n//fib[3], fib[4] = 0;\n\n//when all elements are explicitly initialized, the length of the array need not be determined.\nint even[] = {0, 2, 4, 6, 8};\n\n//Insert  a new element val at position idx.\nvoid insert_array(int* list, int* len , int idx, int val){\n    for (int j = *len ; j &gt; idx; j--) {\n        list[j] = list[j - 1];\n    }\n    list[idx] = val;\n    (*len)++;\n}\n\n//Delete the element at index idx in the array list;\nvoid array_delete(int* list, int* len, int idx) {\n    for (int j = idx; j &lt; *len - 1 ;j++) {\n        list[j] = list[j + 1];\n    }\n    (*len)--;\n    //list(*len) = 0;\n}\n\n//Find the key in the array list of length n.\nint array_search(int* list, int n, int key) {\n    for (int i = 0; i &lt; n; i++) {\n        if(list[i] == key) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n\n\n//binary search\n\n\nint binary_search(int* list, int n, int key) {\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while(low &lt;= high) {\n        mid = low + (high - low) / 2;\n        if(list[mid] == key) {\n            return mid;\n        }\n        else if (list[mid] &lt; key){\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-2-exercises","title":"Ex. 2 Exercises","text":"<p><pre><code>//\u8d2a\u5fc3/\u53cc\u6307\u9488\n//1 \\in M;\n//if x \\in M , then 2x + 1, 3x + 1 \\in M\n//no other integers in M\n//generate the first n elements in M\n\n//all elements in M has 3 types, original ones, 2x + 1 ones and 3x + 1 ones;\n//first type , only 1.\n//use two pointers p1, p2;\n//p1 generate 2 * m[p1] + 1, p2 generate 3 * m[p2] + 1;\nint m[100];\nm[0] = 1;\nint n;\nprintf(\"Enter n : \\n\");\nscanf(\"%d\", &amp;n);\nint p1, p2, cur;\np1 = 0;\np2 = 0;\ncur = 1;\nwhile(cur &lt; n){\n    int tmp1 = 2 * m[p1] + 1;\n    int tmp2 = 3 * m[p2] + 1;\n    if(tmp1 &lt; tmp2) {\n        m[cur] = tmp1;\n        p1++;\n    }\n    else{\n        m[cur] = tmp2;\n        p2++;\n    }\n    cur++;\n}\nfor (int i = 0; i &lt; n; i++){\n    printf(\"%d \", m[i]);\n}\n</code></pre> https://leetcode.cn/problems/majority-element/description/ majority elements that emerges at least  [n / 2] times\uff1b using Boyer-Moore vote algorithm <pre><code>//find the first and most emerged integer in an integer array;\n//we have to traverse all the elements\n//notice we only need to traverse after the current index;\n</code></pre></p> <pre><code>//partition\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint partition(int* arr ,int low, int high){\n    int pivot = arr[high];\n    int j = low - 1;\n    int i = j;\n    while (j &lt; high){\n        j++;\n        if (arr[j] &lt; pivot) {\n            swap(&amp;arr[j], &amp;arr[++i]);\n        }\n    }\n    swap(&amp;arr[i + 1], &amp;arr[high]);\n    return i + 1;\n}\n//\u6ce8\u610f\uff0c \u8fd9\u4e2a\u51fd\u6570\u65e0\u6cd5\u53ea\u80fd\u5c06\u5c0f\u4e8epivot\u7684\u653e\u5de6\u8fb9\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e0b\u4e00\u4e2a\u5143\u7d20\u662fpivot\uff0c\u65e0\u6cd5\u5904\u7406\u7b49\u4e8epivot\u7684\u5143\u7d20\u3002\n\n\n\u91cd\u8981\n//assuming that low to i - 1 &lt; pi, i to j - 1 == pi, j to h unknown, h + 1 to high &gt; pi\nvoid strict_partition(int* arr, int low, int high, int pivot){\n    int j = low;\n    int i = j;\n    int h = high;\n    for (;j &lt;= h; j++){\n        if (arr[j] == pivot) { \n            continue;\n        }\n        if (arr[j] &lt; pivot) {\n            swap(&amp;arr[j], &amp;arr[i++]);\n        }\n        else{\n            swap(&amp;arr[j], &amp;arr[h--]);\n            j--;\n        }\n    }\n}\n\n\n//\u53bb\u9664\u91cd\u590d\u5143\u7d20\n//solution1;\nvoid bubble_sort(int*arr, int n) {\n    for(int i = 0 ; i &lt; n; i++){\n        int swapped = 0;\n        for (int j = 0; j &lt; n - i - 1; j++){\n            if(arr[j] &gt; arr[j + 1]){\n                swap(&amp;arr[j], &amp;arr[j + 1]);\n                swapped = 1;\n            }\n        }\n        if (!swapped) break;\n    }\n}\n\nvoid rm(int* arr, int* len){\n    bubble_sort(arr, *len);\n    for (int i = 0, j = 1; j &lt; *len; j++) {\n        if (arr[j] &gt; arr[j - 1]){\n            arr[++i] = arr[j];\n        }\n    }\n    *len = i + 1;\n}\n\n\u91cd\u8981\n//improve bubble sort\nvoid bubble_sort(int*arr, int n) {\n    for(int i = 0 ; i &lt; n; i++){\n        int swapped = 0;\n        for (int j = 0; j &lt; n - i - 1; j++){\n            if(arr[j] &gt; arr[j + 1]){\n                swap(&amp;arr[j], &amp;arr[j + 1]);\n                swapped = 1;\n            }\n        }\n        if (!swapped) break;\n    }\n}\n\nvoid bubble_sort(int*arr, int n) {\n    for(int i = 0 ; i &lt; n; i++){\n        int k = i;\n        for (int j = 0; j &lt; n - i - 1; j++){\n            if(arr[j] &gt; arr[j + 1]){\n                swap(&amp;arr[j], &amp;arr[j + 1]);\n                k = n - j - 2;\n            }\n        }\n        i = k;\n    }\n}\n\n//joseph ring\nvoid joseph(int n, int m, int* arr){\n    int cur = 0;\n    for (int j = 1; j &lt;= n; j++) {\n        cnt = 1;\n        while (cnt &lt; m) {\n            if (arr[(++cur) % n] != 0) cnt++;\n        }\n        printf(\"Number %d out\\n\", arr[cur % n]);\n        while (arr[cur % n] == 0){\n            cur = (cur + 1) % n;\n        }\n    }\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-3-multi-dimension-array","title":"Ex. 3 Multi-dimension array","text":"<p><pre><code>//C99\u4e2d\u53ef\u4ee5\u5199\nint m = 1, n = 1;\nint matrix[m][n];\n//\u56e0\u4e3am, n \u88ab\u521d\u59cb\u5316\u4e86\n\nint a3[2][3] ={{1, 2}}//\u5176\u4f59\u4e3a0\n1 2 0\n0 0 0 \n\n//\u4e0d\u5236\u5b9a\u7b2c\u4e00\u7ef4\n\nint a[][3] = {1, 2, 3, 4, 5}\n1 2 3\n4 5 0\n\nint a[][3] = {{1, 2}, {3}};\n1 2 0\n3 0 0\n</code></pre> <pre><code>//\u591a\u79cd\u8868\u793a\u65b9\u6cd5\nint m[2][2];\nint (*p)[2] = m;\np[0][0] == m [0][0]\n(p + 1)[0] == m[1][0]\n(*p)[0] == m[0][0]\nint **q = m;\n//\u662f\u9519\u7684,\u4e5f\u5c31\u8bf4\u4e00\u4e2a\u4ec0\u4e48\u6570\u7ec4\u5728\u5355\u72ec\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\u53ea\u80fd\u53d8\u6210\u6307\u5411\u8fd9\u4e2a\u4ec0\u4e48\u7684\u6307\u9488\n//\u8fd9\u91ccm\u6700\u591a\u53d8\u6210\u6307\u5411int[2]\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5de6\u8fb9\u662f\u6307\u5411\u4e00\u4e2a\u6307\u9488\u7684\u6307\u9488\uff0c \u6240\u4ee5\u4e0d\u884c\n</code></pre> https://leetcode.cn/problems/toeplitz-matrix/description/ https://leetcode.cn/problems/spiral-matrix/description/ https://leetcode.cn/problems/spiral-matrix-ii/description/ https://leetcode.cn/problems/rotate-image/description/</p>"},{"location":"section2/24-fall-C-programming/#ex4-string","title":"Ex.4 string","text":"<pre><code>//initializing strings\nchar s1[10] = {'k','o','b','e'};\nchar s[] = \"kobe\";\nchar s[5] = \"kobe\";\n//or {\"kobe\"}, considered as {{'k','o','b','e'}}\n//\u4f1a\u81ea\u52a8\u6dfb\u52a0\\0\nchar s[] = {'k'};\nchar s[4] = \"kobe\"\n//\u8fd9\u4e2a\u53ef\u80fd\u6253\u5370\u51fa\u4e71\u7801\n\n\"I am a st\\\nring.\"\n\"I am\" \" a string\"\n\u53ef\u4ee5\u8fde\u8d77\u6765\n\nprintf(\"%s\", str);\n//\u5230\u7b2c\u4e00\u4e2a/0\u4e3a\u6b62\uff0c \u5373\u4f7f\u540e\u9762\u8fd8\u6709\n//\u76f8\u5f53\u4e8e\nfor (int i = 0 ; s[i]; i++){\n    printf(\"%c\", s[i]);\n}\nsizeof(s);\n//\u8fd4\u56des\u7684\u957f\u5ea6\uff0c\u5305\u62ec\\0\nstrlen(s);\n//\u4e0d\u5305\u62ec\\0\n\u6ce8\u610f\u8fd9\u548c int a[10]\u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u8981\u4e584\n\n//\u8f93\u5165\nscanf(\"%s\", str);\n//\u8df3\u8fc7\u524d\u5bfc\u7a7a\u767d\uff0c\u9047\u5230\u7a7a\u767d\u7c7b\u505c\u6b62\uff0c\u6216\u8005\u6ee1\u4e86\uff0c\u6ca1\u6ee1\u81ea\u52a8\u6dfb\u52a0\\0\ngets(str);\nfgets(str, sizeof(str), stdin);\n//gets\u4e0d\u52a0\\n\uff0c\u52a0\\0,fgets\u90fd\u52a0, \u5373gets\u628a\u7b2c\u4e00\u4e2a\u7a7a\u767d\u53d8\u6210\\0\n//fgets \u786e\u4fdd\u7b2csizeof(str)\u4e2a\u662f\\0\n//\u76f4\u5230\u6362\u884c\n//\u9010\u4e2achar\u8f93\u5165\u8bb0\u5f97\u672b\u5c3e\u52a0\\0\n\nstrcpy(str1, str2);//\\0\u4e00\u8d77\nstrncpy(str1,str2,n);//n\u4e0d\u5305\u62ec\\0\uff0c\u591f\u7684\u8bdd\u81ea\u52a8\u6dfb\u52a0\nstrcat(str1,str2);//\u8fde\u63a5\nstrcmp(str1, str2);\nwhile((*s1) &amp;&amp; (*s1 == *s2)){\n    s1++;\n    s2++;\n}\nreturn *s1 - *s2;\n\nstrlwr()//\u5927\u8f6c\u5c0f\nstrupr()//\u5c0f\u8f6c\u5927\n\nputs(str)//\u8f93\u51fa\u540e\u81ea\u52a8\u6362\u884c\uff08\\0\u53d8 \\n\uff09\n</code></pre> <pre><code>//\u7edf\u8ba1\u5355\u8bcd\u4e2a\u6570\n//\u6ce8\u610f\u72b6\u6001\u7684\u903b\u8f91\uff01\uff01\nint count_words(char s[]){\n    char*p = s;\n    int inword = 0;\n    int cnt = 0;\n    while(*p) {\n        int letter = *p &gt;= 'A' &amp;&amp; *p &lt;= 'z';\n        if (inword){\n            if (!letter) inword = 0;\n        }\n        else{\n            if (letter) {\n                inword = 1;\n                cnt++;\n            }\n        }\n        p++;\n    }\n    return cnt;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#structured-programming","title":"Structured Programming","text":""},{"location":"section2/24-fall-C-programming/#ex-1-basics_2","title":"Ex. 1 Basics","text":"<pre><code>//\u5173\u6ce8lab\u548chw\n\n//\u51e0\u4e2a\u53ef\u80fd\u4e0d\u5bb9\u6613\u5173\u6ce8\u5230\u7684\u8bed\u53e5\u548c\u7ed3\u6784\n//goto. (\u6700\u597d\u4e0d\u8981\u7528)\n\n//\u8bed\u53e5\u6807\u53f7\n#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 0;\n\n    start:\n        if (i &gt;= 10)  // \u5982\u679c i \u8fbe\u5230 10\uff0c\u9000\u51fa\u5faa\u73af\n            return 0;\n        i++;\n        printf(\"i = %d\\n\", i);\n        goto start;\n\n    return 0;\n}\n\n//else \u603b\u662f\u8ddf\u6700\u63a5\u8fd1\u7684if!!!!!\n//\u51cf\u5c11nested if , always continue the loop\n\n//switch\u8bed\u53e5\n\nchar choice;\nscanf(\"%c\", &amp;choice);\n//\u9650\u5236\u6574\u578b\u8868\u8fbe\u5f0f\uff0c\u5b57\u7b26\u578b\u8868\u8fbe\u5f0f\uff0c\u679a\u4e3e\u578b\u8868\u8fbe\u5f0f\n//\u5982\u679c\u8981\u7528\u6bd4\u5982\u6d6e\u70b9\u578b\uff0c\u5148\u6620\u5c04\u5230\u6574\u578b\n//switch ((int) (x + 0.5))\nswitch (choice) {\n    case 'A' : printf(\"A chosen\\n\");\n    case 'B' : printf(\"B chosen\\n\");\n    default :printf(\"default\");\n}\n//\u5982\u679c\u8f93\u5165A\uff0c\u4f1a\u8f93\u51fa\u4e09\u884c\n//\u4e3a\u4e86\u8df3\u51faswitch\uff0c\u53ef\u4ee5\u7528break\uff1b\n\n\n\n//compare float\n#define EPS 1e-3\n//a == 0;\nfabs(a) &lt; EPS; \n//a &lt; 0;\na &lt; -EPS;    \n//a &lt;= 0;\na &lt;= EPS;\n//a &gt; 0;\na &gt; EPS;\n//a &gt;= 0;\na &gt;= -EPS;\n//a &gt;= b;\na + EPS &gt;= b; \n//a == b\nfabs(a - b) &lt; EPS\n//\u89c4\u5f8b\u603b\u7ed3\uff1a\u5f00\u533a\u95f4\u6bd4\u8f83\u4e25\u683c\u4fdd\u8bc1\uff0c\u95ed\u533a\u95f4\u6bd4\u8f83\u53ef\u4ee5\u653e\u5bbd\u76f8\u7b49\n\n//\u7528while\u8df3\u8fc7\u8f93\u5165\u7684\u7a7a\u767d\u5b57\u7b26\nwhile((c = getchar()) == '' || c == '\\t');\n//\u8fd9\u6837c\u662f\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u975e\u7a7a\u683c\u6216\u8005tab\n\n//\u7edf\u8ba1\u5404\u79cd\u5b57\u7b26\u4e2a\u6570\nint c, nwhite, nother, ndigit; \nnwhite=nother=ndigit=0; \nprintf(\u201d\u8f93\u5165\u5b57\u7b26\u884c\\n\u201d); \nwhile ((c = getchar()) != \u2019\\n\u2019) { \n    switch ( c ) { \n    case \u20190\u2019:case \u20191\u2019:case \u20192\u2019:case \u20193\u2019: case \u20194\u2019: case \u20195\u2019:case \u20196\u2019:case \u20197\u2019:case \u20198\u2019: case \u20199\u2019: ndigit++; break; \n    case \u2019 \u2019:case \u2019\\t\u2019: nwhite++; break; \n    default: nother++; break; \n    } \n} \nprintf(\u201ddigit = %d\\twhite space = %d\\tother = %d\\n\u201d, ndigit, nwhite, nother); \n\n\n\n//do-while, \u81f3\u5c11\u6267\u884c\u4e00\u6b21\u5faa\u73af\u4f53\nint s = 0, i = 1;\ndo {\n    s+=i++;\n}while(i &lt;= 100);\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-2-exercises_1","title":"Ex. 2 Exercises","text":""},{"location":"section2/24-fall-C-programming/#newton-methods","title":"newton methods","text":"\\[ x_{k + 1} = x_k - \\frac{f(x_k)}{f'(x_k)}, \\quad k = 0, 1, \\cdots \\] <p>until</p> \\[ d_k = \\frac{f(x_k)}{f'(x_k)} &lt; \\epsilon  \\] <pre><code>//find the solution of \n\n#define EPSILON 1e-6\nint main() {\n    double x, d;\n    x = - 2;\n    do { \n        d = (((3.0*x+4.0)*x-2.0)*x+5.0)/ ((9.0*x+8.0)*x-2.0); /* f(x)/f'(x) */ \n        x = x-d; \n    } while (fabs(d) &gt; EPSILON);\n    //\u4e0d\u8981\u5fd8\u5206\u53f7 \n    printf(\"The root is %.6f\\n\", x);\n    return 0;\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#binary-search","title":"binary-search","text":"<pre><code>#include &lt;math.h&gt;\ndouble low = -INF, high = INF, ans;\n//f(low) &lt; 0, f(high) &gt; 0;\nwhile (low &lt; high - EPS) {\n    mid = low + (high - low) / 2;\n    if (fabs(f(mid) &lt; EPS) ans = mid;\n    if (f(mid) &lt; -EPS) {\n        low = mid;\n        continue;\n    }\n    else {\n        high = mid;\n    }\n}\n</code></pre>"},{"location":"section2/24-fall-C-programming/#crt","title":"CRT","text":"<pre><code>//find the mininum = 2 mod 3, = 3 mod 5, = 4 mod 7;\n#include &lt;stdio.h&gt;\n\nint main() {\n    int ans = 0;\n    while (!(ans % 3 == 2 &amp;&amp; ans % 5 == 3 &amp;&amp; ans % 7 ==4)){\n        ans++;\n    }\n    return 0;\n}\n\n//optimize\nint i = 2;\ndo i += 3;\nwhile (i % 5 != 3)\n\nwhile (i % 7 != 4)\n    i += 15;\n</code></pre>"},{"location":"section2/24-fall-C-programming/#leibniz-formula","title":"Leibniz formula","text":"<p>$$ \\frac{\\pi}{4} = \\sum_{k = 0}^\\infty (-1)^{k} \\frac{1}{2k + 1} $$ <pre><code>int d = 1;\ndouble term = 1.0;\ndouble sum = 0;\nwhile (fabs(term) &gt;= EPS){\n    sum += term;\n    d += 2;\n    term = (d - 1) % 4 ? -1.0 / d : 1.0 / d;\n}\nreturn s;\n</code></pre></p> <p>sieve.c ramanujan.c</p>"},{"location":"section2/24-fall-C-programming/#ex-3-summation-of-series","title":"Ex. 3 summation of series","text":"<p>\u6ce8\u610f\uff0c\u7ea7\u6570\u6c42\u548c\u7684\u65f6\u5019\u6d89\u53ca\u5230\u901a\u5411\u5e26\u9636\u4e58\uff0c \u4e00\u822c\u7528\u9012\u63a8\u3002 <pre><code>double s = 0 ;\ndouble t = t_0;//\u5148\u7b97\u9996\u9879\nint k = 0;//\u4e0b\u6807\nwhile (fabs(t) &gt;= EPS) {\n    s += t;\n    t = f(t, k);//\u66f4\u65b0t\n    k++;\n}\n</code></pre></p>"},{"location":"section2/24-fall-C-programming/#ex-4-random","title":"Ex. 4 random","text":"<pre><code>//\u590d\u4e60lab\u548chw\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\nsrand(time(NULL));\nint r = rand();\n</code></pre>"},{"location":"section2/24-fall-C-programming/#basic-calculation-rules","title":"Basic calculation rules","text":""},{"location":"section2/24-fall-C-programming/#ex-1-basic-data-types","title":"Ex. 1 Basic data types","text":"<pre><code>int has 4 bytes \nsigned -2^31 to 2^31 - 1\nunsigned 0 to 2^32 - 1\n\n//\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\n//\u5148\u53d6\u53cd\u5728\u52a01\n//\u53ef\u4ee5\u77e5\u9053\uff0c\u9996\u4f4d\u662f0 \u4ee3\u8868\u6b63\u6570\uff0c -1\u4ee3\u8868\u8d1f\u6570\n\n//10\uff0c 8\uff0c 16\u8fdb\u5236\u6570\u7684\u4e66\u5199\u5f62\u5f0f\n\n\u5341\u8fdb\u5236\u6b63\u5e38\n\u516b\u8fdb\u5236 0123\n011\n01\n\n\u5341\u516d\u8fdb\u5236 0x123 \n\n08x16\n</code></pre> <p>integer types char  1 unsigned char. 1 signed char.  1 int.  4 unsigned int.  4  short  2 unsigned short. 2 long 8 unsigned long 8 long long 8 float  4.   6 decimal places double 8.  15.  decimal places long double 8.  19 decimal places</p> <pre><code>\u957f\u6574\u578b\u548c\u65e0\u7b26\u53f7\u7684\u8868\u793a\n\nlong 0L\n\nunsigned int 1U\n\nunsigned long 22UL or 22LU\n\n\u6d6e\u70b9\u578b\u8868\u8ff0\n\n7.\n\n.457 \n\n1e-1\n//e\u524d\u540e\u90fd\u8981\u6709\n\n1.5 double\n1.5f float\n1.5L double\n\n\n//\u6bd4\u8f83\u6d6e\u70b9\u6570\n//\u7edd\u5bf9\u8bef\u5dee\nfabs(x - y) &lt; 1e-6\n//\u76f8\u5bf9\u8bef\u5dee\nfabs(x - y) &lt;= fabs(x * 1e-6)\n</code></pre> <pre><code>char\n//char \u53ef\u4ee5\u5f53\u4f5c8\u4f4d\u6574\u578b\n\n//ASCII\u7801\u91cc\u9762\u5148A 65\uff0c a 97\u5e76\u975e\u7d27\u8ddfA\n\n//\u8f6c\u4e49\u5b57\u7b26\n\n\u2018\\r\u2019//\u56de\u8f66\u5230\u5f53\u524d\u884c\u5f00\u5934\n'\\n'\n'\\t'\n\u2018\\v\u2019//\u5782\u76f4\u8df3\u5230\u4e0b\u4e00\u884c\n\nhello\n     world\n'\\f' //\u6362\u9875\n'\\'' //'\n'\\\"' //\"\n'\\ddd'. //ddd 0ddd\u8868\u793a\u7684\u5b57\u7b26\n'\\xhh' //hh 0xhh\u8868\u793a\u7684\u5b57\u7b26\n'\\\\'  //\u53cd\u659c\u6760\n\n//\u6ce8\u610f windows \u7cfb\u7edf\u7684\u5730\u5740\\\\\u5206\u5272\uff0c\u5176\u4e2d\\\u662f\u8f6c\u4e49\u5b57\u7b26 mac / linux \u5206\u5272\u7528 /\n'\\0' \n\n\n\n\u5b57\u7b26\u578b\u5e38\u91cf\u548c\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u533a\u522b\n\n\u5b57\u7b26\u4e32\u5e38\u91cf \n\"string\"\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex-2-input-and-output","title":"Ex. 2 input and output","text":"<pre><code>#include &lt;stdio.h&gt;\nputchar(ch);\n\ngetchar();\n//read a char from stdin44\n//\u7528getchar\u7684\u65f6\u5019\uff0c\u56de\u8f66\u4ee3\u8868\u7ec8\u7ed3\uff0c \u4e00\u822c\u6765\u8bf4\u4e0d\u4f1a\u8bfb\u5165\u56de\u8f66\uff0c \u4f46\u662f\uff0c \u5982\u679c\u5faa\u73af\u8bfb\u5165\uff0c \u5219\u5f88\u53ef\u80fd\u8bfb\u5165\u56de\u8f66\nwhile(1){\n    char c = getchar();\n    //if (c == '\\n) continue;\n    putchar(c);\n    if (c == 'e') break;\n}\n//\u5982\u679c\u8f93\u5165z\u52a0\u56de\u8f66\n//\u8f93\u51faz\u52a0\u56de\u8f66\n\n\n//\u8f93\u5165zzz\u52a0\u56de\u8f66\n//\u8f93\u51fazzz\u52a0\u56de\u8f66\n\n\nprintf();\n\n\"\"\u91cc\u6709\u4e09\u7c7b\u5b57\u7b26\n\u666e\u901a\u5b57\u7b26\uff0c  \u8f6c\u79fb\u5b57\u7b26\uff0c \u548c\u683c\u5f0f\u8bf4\u660e\n\n\u683c\u5f0f\u7b26\uff1a\n%d\n%o\n%x\n%U //\u65e0\u7b26\u53f7\u6574\u578b10\u8fdb\u5236\n\nprintf(\"%u\", -1);\n//\u5bf9\u4e8eint 00000000000000000000000000000001 \u8865\u780111111111111111111111111111111111\n\n%c\n%s\n%f\n//\u9ed8\u8ba4\u516d\u4f4d\u5c0f\u6570\n\n%e\n//\u6307\u6570\u5f62\u5f0f\u8f93\u51fa\u5b9e\u6570\nprintf(\"%e\", 12.0);\n1.200000e+01\n\n\u8f93\u51fa\u683c\u5f0f\u4fee\u9970\n%[] \u683c\u5f0f\u7b26\n-//\u5de6\u5bf9\u9f50\uff0c\u548cw\u6709\u5173\n+//\u6b63\u6570\u4e5f\u5e26\u7b26\u53f7\u8f93\u51fa\n#//\u516b\u8fdb\u5236\u52a00\uff0c \u5341\u516d\u8fdb\u5236\u52a00x\uff0c\u6d6e\u70b9\u6570\u603b\u662f\u663e\u793a\u5c0f\u6570\u70b9\n\n//\u597d\u50cf\u53ea\u5bf9%#.0f\u6709\u7528\uff0c \u6bd5\u7adf\u6d6e\u70b9\u6570\u4e00\u822c\u90fd\u662f\u81ea\u52a8\u663e\u793a\u5c0f\u6570\u70b9\nw\n//\u5236\u5b9a\u8f93\u51fa\u5b57\u7b26\u6570\uff0c \u5982\u679c\u5927\u4e8ew\u5c31\u65e0\u89c6w\uff0c \u5426\u5219\u6839\u636e-\u662f\u5426\u5b58\u5728\u8865\u51fa\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u7684\u7a7a\u683c\n.p\n//\u5bf9lf\uff0c f\uff0c  e\u683c\u5f0f\uff0c \u5236\u5b9a\u5c0f\u6570\u70b9\u4ee5\u540e\u7684\u4f4d\u6570\uff0c \u9ed8\u8ba4\u662f6\nh/l/L\n\u7d27\u8ddfd,f,lf etc.\nh\u548c\u6574\u578b\u7528\uff0c \u8868\u793ashort\u6216\u8005unsigned short\nhd, hu\nl\u548c\u6574\u578b\u7528\uff0c \u8868\u793a\u52a0\u4e0along\nlu unsiged long\nld, long \nlld long long \nLf, long double\n\n//%Lf\u662f long double \n//%lf\u662fdouble\n\nscanf();\n\n//\u683c\u5f0f\u63a7\u5236\u5b57\u7b26\u4e32\u548cprintf\u4e0d\u540c\u7684\u662f\n\u683c\u5f0f\u8f6c\u6362\u7b26\n*//\u8df3\u8fc7\u4e00\u4e2a\u8f93\u5165\u6570\u636e\u9879\nw//\u5bbd\u5ea6\u8bf4\u660e\uff0c &lt;w\u5b9e\u9645\u5bbd\u5ea6\uff0c &gt;w \u622a\u65ad\nh/l/L\n//short int , long int, long double;\nd o x u c s e,f\n//\u6ce8\u610f\u7ed9\u51fa\u53d8\u91cf\u5730\u5740\n\n//\u666e\u901a\u5b57\u7b26\u8f93\u5165\u7684\u65f6\u5019\u8981\u4e25\u683c\u8f93\u5165\n//\u8ba4\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u540d\u5b57\u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u8f93\u5165\u7684\u5730\u5740\nchar s[100];\nscanf(\"%s\",s);\n//\u4e14\u53ea\u80fd\u8f93\u51fa99\u4f4d\uff0c \u56e0\u4e3a\u8981\u6dfb\u52a0\\0\n//\u4e14\u5ffd\u7565\u524d\u9762\u7684\u7a7a\u683c\uff0c \u5e76\u4e14\u9047\u5230\u7a7a\u767d\u5c31\u505c\u6b62\n\n//\u6ce8\u610f\n\n\"%c\"\u8f93\u5165\u7684\u65f6\u5019\uff0c\u7a7a\u767d\u548c\u8f6c\u4e49\u5b57\u7b26\u90fd\u6709\u6548\u8f93\u5165\uff0c\u5982\u679c\u8df3\u8fc7\u7a7a\u767d\u5b57\u7b26\n\u7528\" %c\"\n\n//\u8f93\u5165\u7684\u7ec8\u7ed3\n\n\u9047\u5230\u7a7a\u767d\u7c7b\uff0c\u5df2\u7ecf\u8bfb\u5165\u8db3\u591f%4d\uff0c \u5f53\u8f93\u5165\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4ee5\u540e\u4e0d\u80fd\u6784\u6210\u6b63\u786e\u7684\u683c\u5f0f\n\n//\u8fde\u7eed\u8f93\u5165\n\n\"%d%d\"\u4e2d\u95f4\u7528\u7a7a\u767d\u5206\u5272\n\n\"%2d%2d\" \n//\u8f93\u5165123 12\n//\u8f93\u51fa12 3\n//\u5148\u8bfb\u53d6\u4e24\u4f4d\uff0c \u7136\u540e\u5728\u8bfb\u53d6\u4e24\u4f4d\uff0c \u4f46\u662f\u540e\u9762\u4e0d\u8981\u8bfb\u53bb\u4e86\uff0c \u6240\u4ee5\u4ee5\u7a7a\u683c\u4f5c\u4e3a\u7ec8\u6b62\n\n\"%2d%*d%2d\"\n//\u8f93\u5165123 12\n//\u8f93\u51fa12 12\n//\u5148\u8bfb\u53d6\u4e24\u4f4d\uff0c\u7136\u540e\u4ee5\u7a7a\u683c\u5206\u5272\u8bfb\u53d6\u7684\u4e0b\u4e2a\u662f3\uff0c \u6240\u4ee5\u8df3\u8fc73\uff0c\u518d\u8bfb\u53d612\n\n\"%3d%*4d%d\"\n//\u8f93\u5165123456 78\n//\u5148123\uff0c \u7136\u540e456\u8df3\u8fc7\uff0c78\n//\u5982\u679c\u8f93\u516512345678\n//\u5148123\uff0c \u7136\u540e4567\u8df3\u8fc7\uff0c 8\n</code></pre>"},{"location":"section2/24-fall-C-programming/#ex3-calculation","title":"Ex.3 Calculation","text":"<pre><code>//\u5355\u76ee\uff0c \u53cc\u76ee\uff0c \u548c\u4e09\u76ee\u8fd0\u7b97\u7b26\n\n//\u53cc\u76ee\u4ece\u5de6\u5230\u53f3\uff0c \u5355\u76ee\u4e09\u76ee\u4ece\u53f3\u5230\u5de6\n\n\n\u5355\u76ee\uff1a+ - =\n\u53cc\u76ee\uff1b + - * / %\n//\u6ce8\u610f\uff0c \u6574\u9664\u54110\u53d6\u6574\n\n//\u5bf9mod\u7684\u7279\u522b\u8bf4\u660e\n\na % b = a - (a / b) * b;\n//\u6ce8\u610f/\u7684\u5411\u96f6\u53d6\u6574\u7279\u6027\n\n//\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\u5f88\u5f31\uff0c\u6216\u8005\u8bf4\u590d\u5408\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\u5f88\u5f31\n\nx+= j + 1\nx = x + (j + 1)\n\n//\u5f15\u7528\u548c\u81ea\u589e\u7684\u5148\u540e\u5173\u7cfb\n++i//\u540e\u5f15\u7528\n\ni++//\u5148\u5f15\u7528\n\n//\u53ea\u80fd\u7528\u4e8e\u53d8\u91cf\uff0c\u4e0d\u80fd\u7528\u4e8e\u5e38\u91cf\u6216\u8005\u8868\u8fbe\u5f0f\n\n//\u5173\u7cfb\u8fd0\u7b97\u7b26\uff0c\u4f18\u5148\u7ea7\u4f4e\u4e8e\u7b97\u6570\u8fd0\u7b97\u7b26\uff0c\u5e94\u8be5\u9ad8\u4e8e\u8d4b\u503c\n\n&lt; &gt; &lt;= &gt; =\n\u9ad8\u4e8e\n= !=\n\n\u903b\u8f91\u8fd0\u7b97\n!\u9ad8\u4e8e&amp;&amp;\u9ad8\u4e8e||\n\n\n\n\u4f18\u5148\u7ea7\u9ad8\u4f4e\u603b\u7ed3\n(),[],.,-&gt;\n\u975e\n\u7b97\u6570\n\u4f4d\n\u5173\u7cfb\n&amp;&amp; ||\n\u8d4b\u503c\n\n&amp;&amp; //\u5de6\u8fb90\u5219\u4e0d\u8ba1\u7b97\u53f3\u8fb9\n|| //\u5de6\u8fb91\u5219\u4e0d\u8ba1\u7b97\u53f3\u8fb9\n\nint a = 0;\n++a || ++b\n//b\u4fdd\u6301\u4e0d\u53d8\n\nwhile (p &amp;&amp; p -&gt; val != target)\n\n//\u8fd9\u6837\u5982\u679cp\u662f\u7a7a\u6307\u9488\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u8bbf\u95ee\u9519\u8bef\n\nyr % 4 == 0 &amp;&amp; yr % 100 != 0 || yr % 400 == 0 \n\n//\u6761\u4ef6\u8fd0\u7b97\u4ece\u53f3\u5230\u5de6\nx &gt; y ? x : u &gt; v ? u : v\n\n//\u7c7b\u578b\u8f6c\u5316\n\ni &gt; j ? 2 : 1.5\n\u5982\u679ci &gt; j, \u8868\u8fbe\u5f0f\u7684\u503c\u662f2.0\n\n//\u9017\u53f7\u8fd0\u7b97\uff0c \u987a\u5e8f\u8ba1\u7b97\uff0c\u5e76\u4e14\u4ee5\u6700\u540e\u4e00\u4e2a\u4f5c\u4e3a\u7ed3\u679c\nx= (i = 3, i * 2);\n//x = 6\n\n//\u9017\u53f7\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\u6700\u4f4e\n\n//\u4f4d\u8fd0\u7b97\n&amp; | ^ ~\n\n//\u4e00\u4e9b\u5178\u578b\u7528\u6cd5\n\nx &amp; 0177\n\u5bf9\u5e94\u4e8c\u8fdb\u52367\u4e2a1\uff0c \u4e5f\u5c31\u662f\u53d6\u672b\u5c3e7\u4f4d\uff0c\u524d\u9762\u90fd\u662f0\n\nx | 017\n\u6700\u540e\u56db\u4f4d\u90fd\u53d8\u62101\uff0c \u5176\u4ed6\u4e0d\u53d8\n\nx = 017 ^ x\n\u6700\u540e\u56db\u4f4d\u53d6\u53cd\uff0c \u5176\u4ed6\u4e0d\u53d8\n\n^\u7684\u53cd\u8eab\u6027\n\nx = x ^ y;\ny = x ^ y;\nx = y ^ x;\n\n~53\u7684\u7ed3\u679c\u662f-54\n\n\u6bd4\u5982001\n110\n101\n010\n\u4e5f\u5c31\u662f\u8bf41\u53d6\u53cd\u7684\u7ed3\u679c\u662f-2\n\n\n\u89e3\u91ca((k - 1)^k)&amp;k\n\n111\n110\n001\n001\n110\n101\n011\n010\n\n\n&gt;&gt; &lt;&lt; \n&lt;&lt; \u4e582\n&gt;&gt; \u6574\u9664 2\n\n\u53f3\u79fb\u5bf9\u7b26\u53f7\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u6cd5\n\u5bf9\u4e8e\u8d1f\u6570\uff0c 0\u586b\u5145\u6210\u4e3a\u903b\u8f91\u53f3\u79fb\uff0c 1\u586b\u5145\u4f4d\u7b97\u672f\u53f3\u79fb\n\n11111101 //-3\n\n00000011\n\n00000001 -1//\u7b97\u6570\u53f3\u79fb\n01111110 //\u5927\u6574\u6570 \uff0c \u903b\u8f91\u53f3\u79fb\n\n~(~0 &lt;&lt; n)\n\u53f3\u8fb9n\u4f4d\u4e3a1\uff0c \u5176\u4f59\u4e3a0\uff1b\n\n//\u5f3a\u5236\u8f6c\u6362\uff0cfloat\u8f6cint\u4e00\u822c\u76f4\u63a5\u62b9\u53bb\u5c0f\u6570\n</code></pre>"},{"location":"section2/24-fall-C-programming/#file","title":"FILE","text":""},{"location":"section2/LeetCode/","title":"LeetCode\u5237\u9898\u8bb0\u5f55","text":""},{"location":"section2/LeetCode/#128longest-consecutive-sequence","title":"128.Longest Consecutive Sequence","text":"<p>\u904d\u5386\u67d0\u6574\u6570\u6392\u5217\u7684\u6240\u6709\u5b50\u6392\u5217\uff0c\u6c42\u6700\u957f\u8fde\u7eed\u5b50\u6392\u5217\u7684\u957f\u5ea6\u3002 \u8fd9\u91cc\u6211\u4eec\u53ea\u8981\u8003\u8651\u6bcf\u4e2a\u6570\u4f5c\u4e3a\u8d77\u70b9\uff0c\u56e0\u6b64\u4fdd\u5b58\u6bcf\u4e2a\u6570\u7684visited\u72b6\u6001\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u6700\u91cd\u8981\u7684\u662fpython set\u7684\u67e5\u8be2\u662fO(1)\u7684\uff0c\u7136\u540e\u76f4\u63a5\u641c\u7d22\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u662fO(n)\u7684\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution:\n    def longestConsecutive(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        num_set = set(nums)\n        cnt = 1\n        searched = set()\n\n        for n in num_set:\n            if n in searched:\n                continue\n            cur = 1\n            while cur + n in num_set:\n                searched.add(cur + n)\n                cur += 1\n\n            cnt = max(cnt, cur)\n\n        return cnt\n</code></pre>"},{"location":"section2/LeetCode/#89gray-code","title":"89.Gray Code","text":"<p>\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0n-1\u4f4dgray code\u5230n\u4f4dgray code\u53ea\u8981\u628an-1\u4f4d\u53cd\u8f6c\u4e00\u4e0b\uff0c\u7136\u540e\u5728\u6700\u9ad8\u4f4d\u52a00\uff0c1\u5373\u53ef\u3002</p> <pre><code># 00, 01, 11, 10\n# reverse and concat -&gt; 00, 01, 11, 10, 10, 11, 01, 00\n# add 0, 1 -&gt; 000, 001, 011, 010, 110, 111, 101, 100\n\nclass Solution:\n    def grayCode(self, n: int) -&gt; List[int]:\n        def bin2dec(bin):\n            return [int(b, 2) for b in bin]\n\n        def binGrayCode(n):\n            if n == 1:\n                return ['0', '1']\n            else:\n                rep = binGrayCode(n-1)\n                rep = rep + rep[::-1]\n                to_add = ['0' for _ in range(pow(2, n-1))] + ['1' for _ in range(pow(2, n-1))]\n                return [to_add[i] + rep[i] for i in range(len(rep))]\n\n        return bin2dec(binGrayCode(n))\n</code></pre>"},{"location":"section2/LeetCode/#15three-sum","title":"15.Three Sum","text":"<p>\u5bf9\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u7684\u6240\u6709\u4e09\u5143\u5b50\u6570\u7ec4\uff0c\u5047\u8bbe\u5b50\u6570\u7ec4\u95f4\u4e24\u4e24\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u6c42\u6240\u6709\u8fd9\u6837\u7684\u5b50\u6570\u7ec4\u3002 \u6700\u521d\u7684\u60f3\u6cd5\u662f\u6b63\u3001\u8d1f\u3001\u96f6\u5206\u6210\u4e09\u7c7b\uff0c\u5206\u7c7b\u8ba8\u8bba\u3002</p> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        negs = sorted(e for e in nums if e &lt; 0)[::-1]\n        zeros = [e for e in nums if e == 0]\n        posts = sorted(e for e in nums if e &gt; 0)\n\n        res = set()\n\n        # case: \u5305\u542b0\n        if zeros:\n            i, j = 0, 0\n            while i &lt; len(posts) and j &lt; len(negs):\n                s = posts[i] + negs[j]\n                if s == 0:\n                    res.add((posts[i], negs[j], 0))\n                    i += 1\n                    j += 1\n                elif s &gt; 0:\n                    j += 1\n                else:\n                    i += 1\n            if len(zeros) &gt;= 3:\n                res.add((0, 0, 0))\n\n        # case: \u4e24\u8d1f\u4e00\u6b63\n        def two_sum(arr, target, fixed):\n            l, r = 0, len(arr) - 1\n            while l &lt; r:\n                s = arr[l] + arr[r]\n                if s == target:\n                    res.add((fixed, arr[l], arr[r]))\n                    l += 1\n                elif s &gt; target:\n                    l += 1 if arr is negs else r -= 1\n                else:\n                    r -= 1 if arr is negs else l += 1\n\n        for p in posts:\n            two_sum(negs, -p, p)\n        for n in negs:\n            two_sum(posts, -n, n)\n\n        return [list(t) for t in res]\n</code></pre> <p>\u7136\u540e\u53d1\u73b0\u8fd9\u6837\u8ba8\u8bba\u662f\u591a\u4f59\u7684\uff0c\u5b8c\u5168\u7b49\u4ef7\u4e8e\u76f4\u63a5\u56fa\u5b9a\u4e00\u4e2a\u6570\uff0c\u5269\u4e0b\u7684\u4e24\u4e2a\u6570\u7528\u53cc\u6307\u9488\u5373\u53ef\u3002</p> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        nums.sort()\n        res = set()\n        for i in range(len(nums) - 2):\n            if i &gt; 0 and nums[i] == nums[i - 1]:\n                continue  \n            l, r = i + 1, len(nums) - 1\n            while l &lt; r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == 0:\n                    res.add((nums[i], nums[l], nums[r]))\n                    l += 1\n                    r -= 1\n                    while l &lt; r and nums[l] == nums[l - 1]:  \n                        l += 1\n                    while l &lt; r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s &lt; 0:\n                    l += 1\n                else:\n                    r -= 1\n        return [list(t) for t in res]\n</code></pre>"},{"location":"section2/LeetCode/#72edit-distance","title":"72.Edit Distance","text":"<p>\u5b9a\u4e49s1\u548cs2\u7684\u7f16\u8f91\u8ddd\u79bb\u4e3a\u5c06s1\u53d8\u6210s2\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\uff0c\u5141\u8bb8\u7684\u64cd\u4f5c\u4e3a\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26\u3002\u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u7f16\u8f91\u8ddd\u79bb\u3002 \u8fd9\u91cc\u60f3\u5230dp\u5c31\u53ef\u4ee5\uff0c<code>dp[i][j]</code>\u8868\u793as1\u524di\u4e2a\u5b57\u7b26\u548cs2\u524dj\u4e2a\u5b57\u7b26\u7684\u7f16\u8f91\u8ddd\u79bb\u3002</p> <pre><code>class Solution:\n    def minDistance(self, word1: str, word2: str) -&gt; int:\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j],\n                                       dp[i][j - 1],\n                                       dp[i - 1][j - 1])\n\n        return dp[m][n]\n</code></pre>"},{"location":"section2/LeetCode/#55jump-game","title":"55.Jump Game","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4<code>nums</code>\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u8003\u8651\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6700\u957f\u5230\u8fbe\u7684\u4f4d\u7f6e.</p> <pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n\n        i = 0\n        reach = 0\n        n = len(nums)\n\n        while i &lt; n:\n\n            if i &gt; reach:\n                return False\n\n            reach = max(reach, nums[i] + i)\n            i += 1\n\n        return True\n</code></pre>"},{"location":"section2/LeetCode/#274h-index","title":"274.H Index","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4<code>citations</code>\uff0c\u5176\u4e2d<code>citations[i]</code>\u8868\u793a\u7b2c<code>i</code>\u7bc7\u8bba\u6587\u7684\u5f15\u7528\u6b21\u6570\u3002\u8ba1\u7b97\u8be5\u6570\u7ec4\u7684H\u6307\u6570\u3002</p> <p>\u76f4\u63a5\u5bf9<code>[0, len(citations)]</code>\u7684\u95ed\u533a\u95f4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u3002</p> <pre><code>class Solution:\n    def hIndex(self, citations: List[int]) -&gt; int:\n        cit = sorted(citations)\n\n        if sum(cit) == 0:\n            return 0\n\n        begin, end = 0, len(cit)\n        mid = begin + (end - begin) // 2\n        h = 1\n\n        while begin &lt;= end:\n            if cit[-mid] &gt;= mid:\n                if mid &gt; h:\n                    h = mid\n                begin = mid + 1\n            else:\n                end = mid - 1\n            mid = begin + (end - begin) // 2\n\n        return h\n</code></pre>"},{"location":"section2/LeetCode/#114flatten-binary-tree-to-linked-list","title":"114.Flatten Binary Tree to Linked List","text":"<p>\u628a\u4e8c\u53c9\u6811\u5c55\u5f00\u6210\u94fe\u8868\uff08\u5de6\u8282\u70b9\u7a7a\uff0c\u53f3\u8282\u70b9\u6307\u5411\u524d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff09</p> <p>\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5148\u904d\u5386\u8282\u70b9\uff0c\u5b58\u4e0b\u6765\u518d\u8fde\u63a5</p> <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        def tra(root):\n            if not root:\n                return []\n            return [root]+tra(root.left)+tra(root.right)\n\n        fl = tra(root)\n        for i in range(len(fl)-1):\n            fl[i].left = None\n            fl[i].right = fl[i+1]\n</code></pre> <p>\u4f18\u5316\u4e00\u4e2a\u539f\u5730\u904d\u5386\u7684\u7248\u672c\uff0c\u4e14\u4e0d\u7528\u9012\u5f52</p> <pre><code>class Solution:\n    def flatten(self, root: Optional[TreeNode]) -&gt; None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        curr = root\n        while curr:\n            if curr.left:\n                rightmost = curr.left\n                while rightmost.right:\n                    rightmost = rightmost.right\n                rightmost.right = curr.right\n                curr.right = curr.left\n                curr.left = None\n            curr = curr.right\n</code></pre>"},{"location":"section2/LeetCode/#300-longest-increasing-subsequence","title":"300. Longest Increasing Subsequence","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4<code>nums</code>\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u60f3\u5230dp\u5c31\u53ef\u4ee5.</p> <pre><code>class Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        dp = [1 for _ in range(n)]\n\n        for i in range(n):\n            for dp_j, nums_j in zip(dp[:i][::-1], nums[:i][::-1]):\n                if nums_j &lt; nums[i] and dp_j + 1 &gt; dp[i]:\n                    dp[i] = dp_j + 1\n\n        return max(dp)\n</code></pre> <p>\u53ef\u4ee5\u4f18\u5316\u4e00\u4e2a\u8d2a\u5fc3 + \u4e8c\u5206\u3002\u7ef4\u62a4\u6700\u5c0f\u7684\u5b50\u5e8f\u5217\u3002</p> <pre><code>from bisect import bisect_left\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -&gt; int:\n        sub = []\n        for num in nums:\n            pos = bisect_left(sub, num)  \n            if pos == len(sub):\n                sub.append(num)  \n            else:\n                sub[pos] = num  \n        return len(sub)\n</code></pre>"},{"location":"section2/LeetCode/#399-evaluate-division","title":"399. Evaluate Division","text":"<p>\u7ed9\u4e00\u4e9b\u5b57\u6bcd\u4ee3\u8868\u7684\u9664\u6570\u548c\u88ab\u9664\u6570\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u5546\uff0c\u6c42\u65b0\u7ed9\u7684\u67e5\u8be2\u7684\u5bf9\u5e94\u7684\u5546\u3002</p> <p>\u76f4\u63a5\u6784\u5efa\u90bb\u63a5\u56fe\u8fdb\u884cbfs.</p> <pre><code>from collections import deque, defaultdict\n\nclass Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -&gt; List[float]:\n        g = defaultdict(list)\n        for (a, b), val in zip(equations, values):\n          g[a].append((b, val))\n          g[b].append((a, 1.0 / val))\n\n        def bfs(start, end):\n\n          if start not in g or end not in g:\n            return -1.0\n          if start == end:\n            return 1.0\n\n          visited = set([start])\n          q = deque([(start, 1.0)])\n\n          while q:\n            node, cur_val = q.popleft()\n            if node == end:\n              return cur_val\n            for nei, wei in g[node]:\n              if nei not in visited:\n                visited.add(nei)\n                q.append((nei, wei * cur_val))\n\n          return -1.0\n\n        return [bfs(a, b) for a, b in queries]\n</code></pre>"},{"location":"section2/LeetCode/#322-coin-change","title":"322. Coin Change","text":"<p>\u7ecf\u5178dp\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5bf9\u4e8e\u6bcf\u4e2a\u503c\u6240\u9700\u6700\u5c0f\u786c\u5e01\u6570\u91cf\u7684\u6570\u5217\uff0c\u6bcf\u6b21\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u786c\u5e01\u66f4\u65b0\u8fd9\u4e2a\u6570\u5217.</p> <pre><code>class Solution:\n    def coinChange(self, coins: List[int], amount: int) -&gt; int:\n        dp = [amount + 1 for _ in range(amount+1)]\n        dp[0] = 0\n\n        for coin in coins:\n            for i in range(coin, amount+1):\n                dp[i] = min(dp[i-coin] + 1, dp[i])\n\n\n        return dp[-1] if dp[-1] &lt; amount + 1 else -1\n</code></pre>"},{"location":"section2/LeetCode/#287-find-the-duplicate-number","title":"287. Find The Duplicate Number","text":"<p>\u4e8c\u5206\uff0c\u5982\u679c\u5c0f\u4e8emid\u7684\u4e0d\u8db3mid\uff0c\u8bf4\u660e\u91cd\u590d\u6570\u81f3\u5c11\u662fmid\uff0c \u6ce8\u610f\u6211\u4eec\u9000\u51fa\u6761\u4ef6\u662f<code>start &gt;= end - 1</code>\uff0c\u5426\u5219\u5f53<code>start == end - 1</code>\u65f6\uff0c\u5982\u679c\u7b54\u6848\u6b63\u597d\u662fstart\uff0c\u4f1a\u6b7b\u5faa\u73af. \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u6700\u540e\u7684\u5c0f\u60c5\u51b5.</p> <pre><code>class Solution:\n    def findDuplicate(self, nums: List[int]) -&gt; int:\n        start, end = 1, len(nums) - 1\n\n        while start &lt; end - 1:\n\n            mid = start + (end - start) // 2\n\n            cnt = sum([num &lt; mid for num in nums])\n\n            if cnt &gt;= mid:\n                end = mid - 1\n            else:\n                start = mid\n\n        for t in range(start, end + 1):\n            cnt = sum([t == num for num in nums])\n            if cnt &gt; 1:\n                return t\n</code></pre>"},{"location":"section2/LeetCode/#139-word-break","title":"139. Word Break","text":"<p>\u5b57\u7b26\u4e32<code>s</code>\u80fd\u5426\u88ab<code>wordDict</code>\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\uff08\u53ef\u91cd\u590d\uff0c\u53ef\u9057\u6f0f\uff09\u5b57\u7b26\u62fc\u6210.</p> <p>\u65b9\u6cd5\u4e00\u662f\u76f4\u63a5bfs\uff0c\u53ef\u4ee5\u8fc7</p> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n\n        cur = set([s])\n\n        while True:\n            new = set()\n            for word in wordDict:\n                for c in cur:\n                    if c[:len(word)] == word:\n                        new.add(c[len(word):])\n            if '' in new:\n                return True\n            if not new:\n                return False\n            cur = new\n</code></pre> <p>\u65b9\u6cd5\u4e8c\u662fdp\uff0c\u4e3b\u8981\u5f97\u60f3\u5230dp\u7684\u9012\u63a8.</p> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        wordDict = set(wordDict)\n\n        for i in range(1, len(dp)):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n\n        return dp[-1]\n</code></pre>"},{"location":"section2/LeetCode/#688-knight-probability-in-chessboard","title":"688. Knight Probability In Chessboard","text":"<p>\u9a6c\u5728\u8d70k\u6b65\u68cb\u76d8\u4e0a\u7684\u6982\u7387.</p> <p>Note</p> <p>python\u521d\u59cb\u5316\u4e00\u4e2a\u5168\u662f0\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5e94\u8be5\u5199\u6210 <pre><code>dp = [[0] * n for _ in range(n)]\n</code></pre> \u5982\u679c\u5199\u6210 <pre><code>dp = [[0] * n] * n\n</code></pre> \u5219\u6bcf\u4e00\u884c\u90fd\u662f\u540c\u4e00\u4e2a\u5217\u8868</p> <pre><code>class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -&gt; float:\n\n        moves = {\n            (-2, 1),\n            (-1, 2),\n            (1, 2),\n            (2, 1),\n            (2, -1),\n            (1, -2),\n            (-1, -2),\n            (-2, -1)\n        }\n\n        dp = [[0] * n for _ in range(n)]\n        dp[row][column] = 1\n        scope = set(range(n))\n\n        for _ in range(k):\n            new_dp = [[0] * n for _ in range(n)]\n            for i in range(n):\n                for j in range(n):\n                    if dp[i][j] == 0:\n                        continue\n                    else:\n                        for move in moves:\n                            if i + move[0] in scope and j + move[1] in scope:\n                                new_dp[i + move[0]][j + move[1]] += dp[i][j] * 0.125\n            dp = new_dp\n\n        return sum([sum(row) for row in dp])\n</code></pre>"},{"location":"section2/LeetCode/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>\u6700\u957f\u56de\u6587\u5b50\u4e32\uff0c\u76f4\u63a5dp\uff0c\u6ce8\u610f\u904d\u5386\u987a\u5e8f\uff0c\u4ece\u957f\u5ea6\u5c0f\u7684\u5f00\u59cb.</p> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        n = len(s)\n        if n == 1:\n            return s\n\n        max_len = 1\n        max_begin = 0\n\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n\n        for leng in range(2, n+1):\n            for i in range(n):\n                j = leng + i - 1\n                if j &gt;= n:\n                    break\n\n                if s[i] != s[j]:\n                    dp[i][j] = False\n                else:\n                    if j - i &lt; 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i+1][j-1]\n\n                if dp[i][j] and leng &gt; max_len:\n                    max_len = leng\n                    max_begin = i \n        return s[max_begin:max_begin+max_len]\n</code></pre>"},{"location":"section2/LeetCode/#3075-maximize-happiness-of-selected-children","title":"3075. Maximize Happiness Of Selected Children","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a<code>happiness</code>\u5217\u8868\uff0c\u4ee3\u8868\u6bcf\u4e2a\u5b69\u5b50\u7684\u5e78\u798f\u5ea6\u3002\u9009\u62e9<code>k</code>\u4e2a\u5b69\u5b50\uff0c\u6bcf\u6b21\u9009\u5b8c\u540e\uff0c\u5269\u4e0b\u7684\u5b69\u5b50\u5e78\u798f\u5ea6\u4f1a\u51cf\u5c111\u3002\u6c42\u6700\u5927\u5316\u9009\u4e2d\u5b69\u5b50\u7684\u603b\u5e78\u798f\u5ea6\u3002</p> <p>\u5f88\u660e\u663e\u662f\u8d2a\u5fc3\u9009\u62e9\u5e78\u798f\u5ea6\u6700\u9ad8\u7684\u5b69\u5b50\uff0c\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u5199\u6cd5\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002</p> <pre><code>class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -&gt; int:\n        s = 0\n        happiness = sorted(happiness)[::-1]\n        for i in range(k):\n            cur = happiness[i] - i\n            if cur &gt; 0:\n                s += cur\n\n        return s\n</code></pre>"},{"location":"section2/RL4LLM/","title":"RL4LLM\u7b14\u8bb0","text":"<p>\u8ddf\u7740\u77e5\u4e4e\u5b66\u4e60\u4e00\u4e0b\u5f53\u524dRL\u662f\u5982\u4f55\u7528\u4e8eLLM\u7684</p> <p>\u53c2\u8003 https://zhuanlan.zhihu.com/p/1891822525274637445</p> <p>\u7c7b\u6bd4\u5f3a\u5316\u5b66\u4e60\u7684\u6982\u5ff5\uff0cLLM\u7684next-token prediction\u8303\u5f0f\u7684policy \\(\\pi(a|s)\\) \u5373</p> \\[ \\pi(\\hat{y}| \\hat{x}) = \\prod_{t=0}^{T - 1} \\pi(\\hat{y}_t | (\\hat{x}, \\hat{y}_{&lt;t}))\\] <p>\u8fd9\u91cc\\(\\hat{x}\\) \u662f\u6587\u672c\u524d\u7f00\uff0c\\(\\hat{y}\\) \u662ftoken\u5e8f\u5217.</p> <p>\u6211\u4eec\u5e0c\u671b\u6c42\u89e3\u7684\u4f18\u5316\u95ee\u9898\u8868\u793a\u4e3a,</p> \\[ \\max_{\\pi} \\{ \\mathcal{J}(\\pi) := \\mathbb{E}_{x \\sim \\mathcal{D}}\\left[\\mathbb{E}_{y \\sim \\pi_{x}} [r(x, y) - \\beta \\,\\text{KL}(\\pi_x, \\pi_x^{ref})]\\right]\\} \\] <p>\u8fd9\u91cc\\(x\\) \u662fprompt\uff0c \\(y\\) \u662f\u8f93\u51fa\u7684token\u5e8f\u5217\uff0c\\(\\pi_{x}^{ref}\\) \u4e3a\u53c2\u8003\u7b56\u7565\uff0c\u901a\u5e38\u662f\u539f\u6a21\u578b\u672c\u8eab.</p> <p>\\(\\pi_{\\theta}\\)\u662f\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u5316\u7684\uff0c\u6c42\u4e00\u4e0b\u68af\u5ea6</p> \\[ \\nabla_{\\theta} \\mathcal{J}(\\theta) = \\mathbb{E}_{x \\sim \\mathcal{D}} \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | x)} \\left[\\left( r(x, y) - \\beta \\log \\frac{\\pi_{\\theta}(y|x)}{\\pi_{ref}(y|x)}\\right)\\nabla_{\\theta}\\log\\pi_{\\theta}(y | x)\\right] \\] <p>\u6ce8\u610f\u5230\\(y = (a_0, \\dots, a_{T-1})\\),  \u5e76\u5b9a\u4e49\\(s_t := (x, a_0, \\dots, a_{t-1})\\), \u5e26\u5165\u5c31\u5f97\u5230</p> \\[ \\nabla_{\\theta} \\mathcal{J}(\\theta) = \\mathbb{E}_{x \\sim \\mathcal{D}} \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | x)} \\left[ \\sum_{t=0}^{T-1} \\nabla_{\\theta} \\log{\\pi_{\\theta} (a_t | s_t)} \\left( r(x, y) - \\beta \\sum_{t^{\\prime} = 0}^{T - 1}\\log \\frac{\\pi_{\\theta}(a_{t^{\\prime}}| s_{t^{\\prime}})}{\\pi_{ref}(a_{t^{\\prime}}| s_{t^{\\prime}})} \\right) \\right] \\] <p>\u4e3a\u4e86\u4f7fBP\u80fd\u591f\u6210\u7acb(\u6570\u636e\u91c7\u6837\u6240\u7528\u53c2\u6570\u4e0d\u80fd\u4f5c\u4e3a\u4f18\u5316\u5bf9\u8c61)\uff0c\u6211\u4eec\u7528\u4ee5\u4e0b\u66ff\u4ee3\u51fd\u6570\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\uff0c\u53ef\u4ee5\u8bc1\u660e\u4e0d\u6539\u53d8\u68af\u5ea6\u503c</p> \\[ \\mathcal{L}_{k} (\\theta) = - \\mathbb{E}_{x \\sim \\mathcal{D}} \\mathbb{E}_{y \\sim \\pi_{\\theta_k}(\\cdot | x)} \\left[ \\sum_{t=0}^{T-1} \\frac{\\pi_{\\theta}(a_t | s_t)}{\\pi_{\\theta_k}(a_t|s_t)} \\left( r(x, y) - \\beta \\sum_{t^{\\prime} = 0}^{T - 1}\\log \\frac{\\pi_{\\theta_k}(a_{t^{\\prime}}| s_{t^{\\prime}})}{\\pi_{ref}(a_{t^{\\prime}}| s_{t^{\\prime}})} \\right) \\right] \\] <p>\u4f30\u8ba1\u7b56\u7565\u68af\u5ea6</p> <p>\u8003\u8651\u76f4\u63a5Monte-Carlo\u4f30\u8ba1(\u79f0\u4e3aREINFORCE) \uff0c\u591a\u6b21\u91c7\u6837prompt\u5e8f\u5217\u5e76\u5bf9\u5e94\u751f\u6210\u591a\u4e2a\u8f68\u8ff9,\u4f46\u662f\u8fd9\u6837\u4f1a\u6709\u5de8\u5927\u7684\u65b9\u5dee\uff0c\u5c24\u5176\u662fKL\u6563\u5ea6\u90a3\u91cc. \u4e00\u4e2atrick\u662f\u5bf9\u4e8e\u56fa\u5b9a\u7684\\(t\\)\uff0c\u6211\u4eec\u53ea\u7528\u4ece\\(t\\)\u5f00\u59cb\u5230\u6700\u540e\u7684KL\u60e9\u7f5a.</p> <p>\u6211\u4eec\u7ee7\u7eed\u5f15\u5165RL\u7684\u6982\u5ff5</p> <p>\u5bf9\u4e8eLLM\u6211\u4eec\u8ba4\u4e3a\u72b6\u6001\u503c\u51fd\u6570\u662f\u8865\u5168\u54cd\u5e94\u7684\u7d2f\u8ba1\u671f\u671b\u5956\u52b1</p> \\[ V^{\\pi_{\\theta}}(s) = \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | s) } \\left[ r(s, y) \\right] \\] <p>\u800c\u72b6\u6001-\u52a8\u4f5c\u503c\u51fd\u6570\u662f\u5bf9\u4e8e\u7ed9\u5b9atoken\u7684\u671f\u671b</p> \\[ Q^{\\pi_{\\theta}}(s, a) = \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | (s, a) ) } \\left[ r((s, a), y) \\right] \\] <p>\\(x\\) \u7ed9\u5b9a\u4ee5\u540estep t\u67d0\u72b6\u6001\u52a8\u4f5c\u5bf9\u7684\u5956\u52b1\u7684\u671f\u671b\u53ef\u4ee5\u7528\\(Q\\) \u8868\u793a</p> \\[ \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | x)} \\left[ r(x, y) | s_t, a_t\\right] = Q^{\\pi_{\\theta}} (s_t, a_t) \\] <p>\u5e26\u5165\u53ef\u5f97</p> \\[ \\nabla_{\\theta} \\mathcal{J}(\\theta) = \\mathbb{E}_{x \\sim \\mathcal{D}} \\mathbb{E}_{y \\sim \\pi_{\\theta}(\\cdot | x)} \\left[ \\sum_{t=0}^{T-1} \\nabla_{\\theta} \\log{\\pi_{\\theta} (a_t | s_t)} \\left( Q^{\\pi_{\\theta}}(s_t, a_t) - \\beta \\sum_{t^{\\prime} = 0}^{T - 1}\\log \\frac{\\pi_{\\theta}(a_{t^{\\prime}}| s_{t^{\\prime}})}{\\pi_{ref}(a_{t^{\\prime}}| s_{t^{\\prime}})}\\right)\\right] \\] <p>\u8bad\u7ec3Critic\u4f30\u8ba1\u503c\u51fd\u6570\uff0c\u53ef\u4ee5\u51cf\u5c11\u5956\u52b1\u7684\u65b9\u5dee\u95ee\u9898.</p> <p>\u8fd9\u91cc\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f15\u5165\u4f18\u52bf\u51fd\u6570\\(A^{\\pi_\\theta}(s, a) = Q^{\\pi_{\\theta}}(s_t, a_t) - V^{\\pi_{\\theta}}(s_t)\\)</p> <p>\u4e3a\u4e86\u7edf\u4e00\u5404\u79cd\u7b97\u6cd5\u5bf9\u7b56\u7565\u68af\u5ea6\u4f30\u8ba1\u7684\u5f62\u5f0f\uff0c\u8ba9\u7b97\u6cd5\u8003\u8651\u60e9\u7f5a\u9879\uff0c\u635f\u5931\u51fd\u6570\u53ef\u4f30\u8ba1\u4e3a:</p> \\[ \\hat{\\mathcal{L}}_k (\\theta) = - \\frac{1}{NM}\\sum_{i=1}^{N} \\sum_{j=1}^{M} \\left[ \\sum_{t=0}^{T_{ij}-1} \\frac{\\pi_\\theta \\left(a_t^{(ij)} | s_t^{(ij)}\\right)}{\\pi_{\\theta_k} \\left(a_t^{(ij)} | s_t^{(ij)}\\right)} \\cdot \\hat{A}_k \\left(s_t^{(ij)}, a_t^{(ij)}\\right) \\right] \\] <p>\u5404\u79cdRL\u7b97\u6cd5\u5f62\u5f0f\u4e0a\u53ef\u8ba4\u4e3a\u662f\u5bf9\u4f18\u52bf\u51fd\u6570\u7684\u4f30\u8ba1\u4e0d\u540c.</p> <p>PPO4RLHF</p> <p>PPO\u7b97\u6cd5\u89c1openai\u5e93\uff0c\u5173\u952e\u662f\u5982\u4f55\u5957\u7528\u5230LLM\u91cc\u9762 https://spinningup.openai.com/en/latest/algorithms/ppo.html</p> <p>\u5728 RLHF \u4e2d\uff0c\u6211\u4eec\u7684 Policy Model \u662f\u5927\u6a21\u578b\u672c\u8eab Value Model \u53ef\u4ee5\u590d\u7528 Policy \u7684 hidden states\uff0c\u901a\u8fc7\u4e00\u4e2a\u989d\u5916\u7684 MLP \u5934\u6765\u4f30\u8ba1 \\(V_\\theta(s_t)\\)</p> <p>\u4f18\u52bf\u4f30\u8ba1\u7528 GAE \u7b49\u65b9\u6cd5\uff0c\u548c\u4f20\u7edf PPO \u4e00\u6837\uff0c\u4f46\u5956\u52b1\u7684\u6765\u6e90\u4e0e\u6807\u51c6\u5f3a\u5316\u5b66\u4e60\u4e0d\u540c\uff1a</p> <ul> <li>\u4e00\u90e8\u5206\u662f KL \u6563\u5ea6\u60e9\u7f5a\uff08token \u7ea7\u522b\uff09\u4f5c\u4e3a\u4e2d\u95f4\u6b65\u5956\u52b1\uff1b</li> <li>\u4e00\u90e8\u5206\u662f Reward Model \u5bf9\u5b8c\u6574\u8f93\u51fa\u7684\u6253\u5206\u3002</li> </ul> <p>\u6211\u4eec\u60f3\u60e9\u7f5a\u5f53\u524d\u7b56\u7565 \\(\\pi_\\theta\\) \u200b \u4e0e\u53c2\u8003\u7b56\u7565 \\(\\pi_{\\mathrm{ref}}\\)\u200b\uff08\u901a\u5e38\u662f SFT \u6a21\u578b\uff09\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u9632\u6b62\u6a21\u578b\u751f\u6210\u5206\u5e03\u6f02\u79fb\u592a\u8fdc\u3002</p> <p>\u5bf9\u4e2d\u95f4\u6b65\\(t &lt; T\\) \uff0c\u53d6\u539f\u6a21\u578b\u548c\u65b0\u6a21\u578b\u5f53\u524d\u8f68\u8ff9\u7684\u5bf9\u6570\u6982\u7387\uff1a</p> \\[ \\mathrm{KL}_t = \\log \\pi_\\theta(a_t \\mid s_t) - \\log \\pi_{\\mathrm{ref}}(a_t \\mid s_t) \\] \\[ r_t = -\\beta \\mathrm{KL}_t \\] <p>\u6700\u540e\u4e00\u6b65\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Reward Model \u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u6253\u5206\uff1a</p> \\[ r_{T} = R_\\phi(\\text{prompt}, \\text{response}) \\] <p>\u4e0a\u8ff0\u5956\u52b1\u53ef\u4ee5\u88ab\u653e\u5230\\(\\delta_t\\) \u4e2d\uff0c\u56e0\u6b64\u4e5f\u662f\u7b26\u5408\u901a\u7528\u516c\u5f0f\u7684.</p> <p>\u5f00\u5934\u63d0\u5230\u7684\u77e5\u4e4e\u4e13\u680f\u603b\u7ed3\u4e86\u4e0d\u540c\u7b97\u6cd5\u5bf9\u4f18\u52bf\u51fd\u6570\u7684\u4f30\u8ba1</p> <p></p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/","title":"\u8bba\u6587\u7cbe\u8bfb-GLUS","text":"<p>\u8bba\u6587\u94fe\u63a5\uff1a</p> <ul> <li>arXiv: https://arxiv.org/pdf/2411.17646</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#motivation","title":"Motivation","text":"<p>\"Ref\"\u548c\"VOS\"\u4e4b\u95f4\u7684trade-off\uff0c\u5982\u4f55\u628a\u5bfb\u627e\u5173\u952e\u5e27\u7684global reasoning\u548c\u8ffd\u8e2aobjects\u7684local reasoning\u7ed3\u5408\uff1f</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a</p> <p>\u4e00\u4e2a\u5355\u72ec\u7684MLLM\u8981\u5177\u5907Global-Local unified reasoning for VOS\u7684\u80fd\u529b\uff0c\u4e0d\u7528VOS model\u3002</p> <p>\u5e27\u5206\u7c7b\u7b56\u7565\uff1a</p> <p>\u628a\u8f93\u5165MLLM\u7684frames\u5206\u4e3a\u4e24\u79cd\uff1a</p> <ol> <li>Context frames: uniformly sampled from the whole video</li> <li>Query frames: continuously sampled</li> </ol> <p>\u628a\u5c40\u90e8\u5e27\u548c\u5168\u5c40\u5e27\u90fd\u8f93\u5165MLLM\u5b66\u4e60\uff0c\u7528\u4e0d\u540creferring\u5bf9\u6bd4\u5b66\u4e60\u9501\u5b9a\u6b63\u786e\u5bf9\u8c61\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u7528SAM2\u7684memory module\u3002</p> <p>\u80cc\u666f\u56de\u987e\uff1a</p> <p>\u5148\u7b80\u5355\u56de\u987e\u4e00\u4e0bLISA\u7684practice\uff1a</p> \\[&lt;SEG&gt; = MLLM(I, R), \\quad M = DEC(I, &lt;SEG&gt;)\\] <p>\u7528\u5230video\u91cc\uff1a</p> \\[&lt;SEG&gt;_{1:N} = MLLM(I_{1:N}, R), \\quad M_{1:N} = DEC(I_{1:N}, &lt;SEG&gt;_{1:N})\\] <p>MLLM\u80fd\u5904\u7406\u7684\u5e27\u6570N\u6709\u9650\uff0c\u56e0\u6b64\u5f88\u591a\u73b0\u6709\u7684\u65b9\u6cd5\u5148\u91c7\u6837\u5173\u952e\u5e27\u7136\u540e\u7528\u73b0\u6210\u7684VOS model propagate masks\u3002</p> <p>\u4f46\u662f\u4f5c\u8005\u8ba4\u4e3aMLLM\u7684\u81ea\u56de\u5f52\u8303\u5f0f\u5df2\u7ecf\u8db3\u4ee5\u5904\u7406\u65f6\u5e8f\u4e00\u81f4\u6027\uff0c\u56e0\u800c\u73b0\u6210\u7684VOS model\u662f\u4e0d\u9700\u8981\u7684\uff0clocal reasoning\u4e5f\u53ef\u4ee5\u4ea4\u7ed9MLLM\u5b8c\u6210\u3002\u4ece\u800c\u53ef\u4ee5\u505a\u5230train reference consistent\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#method","title":"Method","text":""},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#context-and-local","title":"Context and Local","text":"<p>\u628a\u91c7\u6837\u7684context frames\u653e\u5728query frames\u7684\u524d\u9762\uff0c\u4f5c\u8005\u8ba4\u4e3a\u8fd9\u6a21\u4eff\u4e86\u4eba\u7c7b\u7684\u884c\u4e3a\uff0c\u4f9d\u6b21\u751f\u6210SEG token\uff1a</p> \\[&lt;SEG&gt;_t = LLM ([R, I_{1:N_c}^{I_c}, I_1^Q, &lt;SEG&gt;_1, I_2^{Q}, &lt;SEG&gt;_{2}, \\dots, I_t^{Q}])\\] <p>\u8bad\u7ec3\u9636\u6bb5\uff1a</p> <ul> <li>\u7b49\u95f4\u8ddd\u91c7\u6837 \\(N_C\\)</li> <li>\u8fde\u7eed\u91c7\u6837 \\(N_Q\\)</li> <li>\u6a21\u4effLISA\u76d1\u7763SEG token</li> <li>\u6a21\u4effSAM2\u76d1\u7763mask</li> </ul> <p>\u63a8\u7406\u9636\u6bb5\uff1a</p> <ul> <li>\u6574\u4e2avideo\u5e73\u5747\u5206\u6210 \\(N_C\\) clips\uff0c\u53d6\u6bcf\u4e2aclip\u4e2d\u95f4\u7684\u5e27\u4f5c\u4e3acontext frames</li> <li>\u7528 \\(N_Q\\) \u957f\u5ea6\uff0cstride = 1\u7684\u6ed1\u52a8\u7a97\u53e3\u505agroups of query frames</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#memory-bank-for-mllms","title":"Memory Bank for MLLMs","text":"<p>\u5f88\u7b80\u5355\u7684\u64cd\u4f5c\uff1a</p> \\[M_t = DEC(I_t^Q, &lt;SEG&gt;_t, membank)\\]"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#object-contrastive-loss","title":"Object Contrastive Loss","text":"<p>\u4e3a\u4e86\u589e\u5f3a\u7c7b\u4f3c\u7269\u4f53\u4e4b\u95f4\u7684\u533a\u5206\u5ea6\u7528\u5bf9\u6bd4\u5b66\u4e60\u7684\u65b9\u6cd5\u3002</p> <p>\u6ce8\u610f\u5230MeVis\u91cc\u9762\u5f88\u591a\u4e0d\u540c\u7684expression\u5f88\u53ef\u80fdrefer to the same object\uff0c\u8fd9\u4e9b\u6307\u5411\u76f8\u540c\u7269\u4f53\u7684\u4e0d\u540creferring expressions\u6240\u5bf9\u5e94\u7684SEG tokens\u5c31\u662fpositive examples\u3002follow SimCLR\u91c7\u6837negative examples\u4ee5\u53ca\u8ba1\u7b97loss\u3002</p> <p>\u4f46\u662f\u95ee\u9898\u5728\u4e8epositive examples\u6bd4\u8f83\u5c11\uff0c\u53ea\u6709MeVis\u4e2d\u6709multi-referring\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u4e0d\u8fc7\u6548\u679c\u8fd8\u662f\u5f88\u597d\u3002</p> <p>\u6269\u5c55\u5e94\u7528\uff1a</p> <p>\u6b64\u5916\uff0c\u4f5c\u8005\u8ba4\u4e3aGLUS\u6240\u5c55\u73b0\u7684Global-local reasoning\u80fd\u529b\u80fd\u591f\u8ba9\u4ed6\u88ab\u7528\u6765\u505aQA-based key frame selector\u7684\u4f2a\u6807\u7b7e\u6765\u8bad\u7ec3\u3002\u5177\u4f53\u6765\u8bf4\u9009\u53d6mask IOU\u6700\u9ad8\u7684\u90a3\u4e9b\u5e27\u3002\u8fd8\u53ef\u4ee5\u7528\u8fd9\u4e9b\u5173\u952e\u5e27\u505aanchor\uff0c\u7528VOS model propagate\u51famask\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#results","title":"Results","text":""},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-GLUS/#conclusion","title":"Conclusion","text":"<p>\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u521b\u65b0\u70b9\u5728\u4e8e\u628alocal context\u7684frames\u4e00\u8d77\u7ed9MLLM\uff0c\u4e3b\u8981\u5c31\u662f\u4f18\u5316\u4e86LISA\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u7136\u540e\u6a21\u4effSAM2\u7528\u4e00\u4e2amemory\u4ee5\u53ca\u6a21\u4effSimCLR\u6765\u4e00\u4e2a\u5bf9\u6bd4\u5b66\u4e60\uff0c\u6548\u679c\u975e\u5e38\u597d\u3002</p> <p>\u6838\u5fc3\u8d21\u732e\uff1a</p> <ul> <li>\u53d1\u73b0\u4e86\u4e4b\u524d\u7684\u5de5\u4f5c\u5728\u91c7\u6837\u4e0a\u7684\u7f3a\u9677</li> <li>\u4ece\u4eba\u7c7b\u6807\u6ce8\u6570\u636e\u96c6\u7684\u6d41\u7a0b\uff08\u5148global\u518dlocalize\uff09\u53d7\u5230\u542f\u53d1\u4ee5\u6b64\u4f18\u5316\u8f93\u5165MLLM\u7684samples</li> <li>\u5c06global reasoning\u548clocal reasoning\u7edf\u4e00\u5728\u4e00\u4e2aMLLM\u6846\u67b6\u4e2d</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAM-R1/","title":"\u8bba\u6587\u7cbe\u8bfb-SAM-R1","text":"<p>https://arxiv.org/pdf/2505.22596</p> <p>\u672c\u6587\u4e2d\u4f5c\u8005\u5c1d\u8bd5\u4f7f\u7528SAM\u4f5c\u4e3areward feedback\u6765\u8fdb\u884cmultimodal segmentation model\u7684\u8bad\u7ec3</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAM-R1/#method","title":"Method","text":"<p>\u4f5c\u8005\u4e3b\u8981\u4f7f\u7528\u4e09\u4e2aReward functions\uff0c\u5206\u522b\u662fIOU, Think Format Reward\u4ee5\u53caOutput Format  \u7b97\u6cd5\u4e0a\u7528GRPO\u907f\u514d\u4e86\u4f7f\u7528critic model\uff0c\u7136\u540e\u5bf9GRPO\u7684\u4f18\u5316\u5bf9\u8c61\u8fdb\u884c\u6539\u8fdb\uff0c\u5373\u91c7\u7528\u4e86\u6240\u8c13R1\u8303\u5f0f\uff0c\u6ca1\u6709\u5bf9\u6bcf\u4e2aoutput sequence\u957f\u5ea6\u53d6\u5e73\u5747\uff0c\u800c\u662f\u5bf9\u6240\u6709sequence\u957f\u5ea6\u548c\u53d6\u5e73\u5747(token-level loss normalization)\uff0c\u4ee5\u53ca\u4f7f\u7528\u4e86high-low\u4e0d\u540c\u9608\u503casymmetric clipping </p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAM-R1/#experiment","title":"Experiment","text":"<p>base model\u662fQwen2.5VL-7B\uff0csegmentation model\u662fSAM2-Large\uff0cimage size\u662f840 \\(\\times\\) 840\uff0c\u6bcf\u4e2aquery\u91c7\u68378 responses.</p> <p>\u8bad\u7ec3\u91c7\u7528\u7684\u6570\u636e\u96c6\u662frefcocog \u76843000 instances\uff08\u5e94\u8be5\u6307\u7684\u662fimage - expression pairs?\uff09\u7136\u540e\u5728refcoco, refcoco plus\u4ee5\u53caReasonSeg\u505aevaluation\uff0c\u8fdb\u4e00\u6b65\u8bc4\u4f30\u6a21\u578bout-of-distribution\u7684\u80fd\u529b</p> <p>\u5728ReasonSeg\u4e0a\u8d85\u8fc7Seg-Zero \u5e73\u57472\u4e2a\u70b9\u3002</p> <p></p> <p>\u5728\u4e09\u4e2arefcoco\u7684datasets\u4e0a\u548cSeg-Zero\u5dee\u4e0d\u591a</p> <p>\u56db\u4e2a\u6d88\u878d\u5b9e\u9a8c\uff1a</p> <ol> <li>tiered threshold\u6709\u6548\uff08\u5e94\u8be5\u6307\u7684\u662freward function\uff09</li> <li>GRPO\u7684\u4e24\u4e2a\u6539\u8fdb\u6709\u6548</li> <li>KL constraint\u6709\u6548</li> <li>Negative Reference Points\u6ca1\u5fc5\u8981</li> </ol>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAM-R1/#conclusion","title":"Conclusion","text":"<p>\u8fd9\u7bc7\u5de5\u4f5c\u7528RL\u505aimage referring segmentation\uff0c\u4e3b\u8981\u8d21\u732e\u662f\u8bc1\u660eGRPO\u6539\u8fdb\u7684\u6709\u6548\u6027\uff0c\u4ee5\u53ca\u642d\u5efa\u4e86\u4f7f\u7528SAM 2 \u4f5c\u4e3areward model\u7684pipeline\u5e76\u4e14\u6784\u5efa\u4e86\u5bf9\u5e94\u7684reward function</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/","title":"\u8bba\u6587\u7cbe\u8bfb-SAMWISE","text":"<p>\u8bba\u6587\u94fe\u63a5\uff1a</p> <ul> <li>GitHub: https://github.com/ClaudiaCuttano/SAMWISE/tree/main</li> <li>arXiv: https://arxiv.org/pdf/2411.17646</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#motivation","title":"Motivation","text":"<p>\u5982\u4f55\u7528SAM2\u505aRVOS\u4efb\u52a1\uff1f\u9762\u4e34\u4e09\u4e2a\u4e3b\u8981\u6311\u6218\uff1a</p> <ol> <li>Text understanding: \u5982\u4f55\u7528\u6587\u672cprompt SAM2\uff1fimage\u4efb\u52a1\u4e0a\u6709BEIT-3\u3001LLaVA\uff0c\u4f46\u662fvideo\u4e0a\u76ee\u524d\u6ca1\u6709</li> <li>Temporal modeling: \u5bf9\u5e94MeVis\u8fd9\u79cd\u6570\u636e\u96c6\u5bf9motion\u7684\u8981\u6c42</li> <li>Tracking bias: \u5bb9\u6613\u8ddf\u8e2a\u9519\uff0c\u51fa\u73b0\u65b0\u7684\u7b26\u5408\u8981\u6c42\u7684object\u5e94\u8be5\u80fd\u8fc5\u901f\u4fee\u6b63</li> </ol> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> <ul> <li>\u6700\u597d\u5f15\u5165\u53c2\u6570\u6bd4\u8f83\u5c0f\uff08\u4e0d\u7528finetune SAM2\uff09\uff0c\u7136\u540e\u4e0d\u8981\u7528\u5927\u7684VLM</li> <li>\u89e3\u51b3\u524d\u4e24\u4e2a\u95ee\u9898\uff1a\u5f15\u5165Cross-modal Temporal Adapter\uff0c\u5e76\u4e14\u7528MLP\u6210\u4e3aPrompt Embedding\u7ed9SAM2</li> <li>\u89e3\u51b3\u7b2c\u4e09\u4e2a\u95ee\u9898\uff1a\u7528Conditional Memory Encoder\uff0crefocus its tracking</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#method","title":"Method","text":""},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#problem-setting","title":"Problem Setting","text":"<p>\u4ee5streaming fashion process videos\uff0c\u6bcf\u6b21\u5904\u7406T frames\u3002\u628areferring expression tokenize\u4ee5\u540e\u52a0\u4e00\u4e2a[CLS]\u3002</p> <p>SAM2\u7684encoder\uff08Hiera\uff09\u72ec\u7acb\u63d0\u53d6\u6bcf\u4e00\u5e27\u7684\u7279\u5f81\uff0c\u4f5c\u8005\u79f0\u4e3amemory-less features\uff0c\u7ecf\u8fc7Memory Attention\u4ee5\u540e\u79f0\u4e3amemory features\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#prompt","title":"Prompt","text":"<p>\u7528\u4e00\u4e2afrozen\u7684text encoder\u63d0\u53d6language features\uff08\u4e00\u5171L\u4e2atokens\uff09\uff0c\u9009\u53d6\u5176\u4e2d\u5c5e\u4e8e[CLS] token\u4ee5\u53caverb token\u7684\uff0cconcat\u5e76\u7528MLP\u6295\u5f71\u6210prompt\u7ed9SAM2\uff0c\u6bcf\u4e00\u5e27\u90fdprompt\u3002</p> <p></p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#cross-modal-temporal-encoder","title":"Cross-Modal Temporal Encoder","text":"<p>Adapter\u7684\u7ecf\u5178\u6846\u67b6\uff1a</p> \\[\\text{Adapter}(x) = x + \\sigma(xW_{down})W_{up}\\] <p>\u8fd9\u91cc\u4e5f\u662f\u7c7b\u4f3c\u7684\u4f46\u662fcross-modal\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#hierarchical-selective-attention","title":"Hierarchical Selective Attention","text":"<p>\u76f4\u89c9\u4e0amotion\u662f\u6bd4\u8f83\u5c40\u90e8\u8fd1\u7aef\u7684\uff0c\u548c\u90bb\u8fd1\u5e27\u6bd4\u8f83\u76f8\u5173\u3002</p> <p></p> <p>k\u662f\u5916\u90e8encoder\u7684\u5c42\u6b21\u3002\u5148\u5206\u6210N\u4e2apatch\uff1a</p> \\[N = H_k W_k / P^2\\] <p>\u6bcf\u4e2apatch\u6709TP\u00b2\u4e2atoken\uff0c\u6bcf\u4e2apatch\u5185\u52a0\u4e0apositional embedding\u4ee5\u540eself attention\uff1a</p> \\[x_{i, j, t}^{k, n} = x_{i, j, t}^{k, n} + e[i, j] + e[t]\\] \\[x_{i, j, t}^{k, n} = SA\\left(\\left\\{x_{i^{\\prime}, j^{\\prime}, t^{\\prime}}^{k, n}\\right\\}\\right)\\] <p>i', j', t' \u904d\u5386P, P, T\uff0c\u6ce8\u610f\u8fd9\u91ccP\u968f\u7740k scaled\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#cross-modal-adaptation","title":"Cross-modal Adaptation","text":"<p>VTA \u548c TVA\u4e24\u4e2across attention\u6a21\u5757\uff1a</p> \\[F^k[t] = F^k[t] * CA(F^k[t], \\mathcal{E}^k)\\] \\[E^k = E^k * CA(E^k, F^k_{avg})\\] <p>avg\u662f\u5728\u91c7\u6837\u7684clip\u4e2d\u3002</p> <p>\u6700\u540e\u628aMLP\u540e\u7684prompt encode\u4ee5\u540e\u548cmemory attention\u4ee5\u540e\u7684visual features\u8fdbmask decoder\uff0c\u5f97\u5230mask token\u4ee5\u53capredicted mask\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#conditional-memory-encoder","title":"Conditional Memory Encoder","text":"<p>\u89e3\u51b3\u6240\u8c13\u7684tracking bias\u3002</p> <p></p> <p>\u4f5c\u8005\u53d1\u73b0memory-less\u7684features\u6709unbiased representation\uff0c\u53ef\u4ee5\u7528\u6765\u89c4\u907fpast prediction\u7684\u5f71\u54cd\u4fee\u6b63bias\u3002</p> <p>\u7528SAM2 mask decoder\u7684cross attention\u7684\u53c2\u6570\u5148\u628amemory\u4e4b\u524d\u7684feature\u548cencode\u4e4b\u524d\u7684prompt \\(\\(\\rho\\)\\) \u505a\u4e00\u4e2aCA\u5f97\u5230memoryless token\uff08\u5bf9\u6bd4sam2 decode\u51fa\u7684mask token\uff09\u3002</p> <p>\u52a0\u4e0a\u4e00\u4e2alearnable decision token\u5206\u522b\u505aSA\uff0c\u5f97\u5230\u65b0\u7684decision token\u7ebf\u6027\u6295\u5f71from d to 1\u5f97\u5230 \\(p_{detect}\\)\uff0c\u5927\u4e8e0.5\u5c31\u6709\u4ee5\u4e0b\u7684\u4fee\u6b63\u673a\u5236\uff1a</p> \\[P_l = D_{dec}(F, \\rho)\\] \\[M(h, w) = \\mathbf{1}(h, w) \\text{ where } P_l &gt; 0\\] \\[P = \\lambda * P_l \\circ M + P_m \\circ (1 - M)\\] <p>\u8fd9\u91cc\u6709\u7279\u6b8a\u7684\u8bad\u7ec3\u65b9\u6cd5\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#results","title":"Results","text":"<p>\u8bad\u7ec3\u65b9\u5f0f\u53c2\u8003\uff1a</p> <p>Following [11, 21, 29, 43, 44], we undergo pre-training for 6 epochs on RefCOCO/+/g [31, 50] with a learning rate at 1e-4 and finetune on Ref-Youtube-VOS [39] for 4 epochs with a learning rate of 1e-5, using the Adam optimizer. The model trained on the Ref-YouTube-VOS is directly evaluated on DAVIS17 [18]. On MeViS [8], we train for 1 epoch. We set T = 8.</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SAMWISE/#conclusion","title":"Conclusion","text":"<p>\u4f5c\u4e3aRVOS\u7684\u65b0SOTA\uff0c\u8fd9\u7bc7\u5de5\u4f5c\u4fee\u6539SAM2\u589e\u5f3a\u4e86text understanding\u3001temporal modeling\uff0c\u4ee5\u53ca\u60f3\u529e\u6cd5\u4fee\u6b63memory\u5bfc\u81f4\u7684tracking bias\u4ee5\u9002\u5e94\u9ad8\u96be\u5ea6\u7684RVOS\u6570\u636e\u96c6\u6bd4\u5982MeVis\u3002</p> <p>\u4e3b\u8981\u8d21\u732e\uff1a</p> <ul> <li>\u5728\u5f3a\u5927\u7684SAM2\u4ee5\u53catext encoder\u4e0a\u505across-modal adaptation</li> <li>\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u628a\u73b0\u6709\u7684\u5f3a\u5927\u7684\u6a21\u578b\u7528\u5230\u522b\u7684\u4efb\u52a1\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u60f3\u529e\u6cd5\u52a0\u6a21\u5757\u505aadaptation</li> <li>\u5982\u4f55\u628a\u8fd9\u79cd\u5de5\u4f5c\u505a\u7684\u7b80\u5355\u6709\u6548\uff1a\u4e00\u662f\u53c2\u8003\u4e4b\u524d\u7684\u65b9\u6cd5\uff0c\u4e8c\u662f\u4eceintuition\u51fa\u53d1\uff08\u6bd4\u5982\u8fd9\u91cc\u4fee\u6b63tracking bias\uff09</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/","title":"\u8bba\u6587\u7cbe\u8bfb-Seg-R1","text":"<p>https://arxiv.org/pdf/2506.22624 https://geshang777.github.io/seg-r1.github.io/</p> <p>\u8fd9\u7bc7\u6587\u7ae0\u4e5f\u662f\u7528RL\u505asegmentation\uff0c\u4f46\u662f\u548cSAM-R1\u5b58\u5728\u4e00\u4e9b\u533a\u522b</p> <p>\u8fd9\u7bc7\u5de5\u4f5c\u505a\u7684\u4efb\u52a1\u662fcamouflaged object detection\u548csalient object detection</p> <p>\u53e6\u5916\u8fd9\u7bc7\u5de5\u4f5c\u8fd8\u63d0\u51fa\u4e86\u4e00\u4e2aSFT\u7684dataset FCoT</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/#method","title":"Method","text":""},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/#rl","title":"RL","text":"<p>\u91c7\u7528GRPO\u4f18\u5316\uff0c\u4f46\u662f\u8f93\u51fatag\u8fd8\u9700\u8981\u4e00\u4e2alabels\u6807\u7b7e\u5305\u88f9\u6240\u8c13mask prompt</p> <p>We employ Qwen2.5-VL to predict points, bounding boxes, and labels (referred to as mask prompts) to guide SAM2  in mask generation. This approach reduces the dense prediction of segmentation to a sparse mask prompting task, significantly lowering the learning cost.</p> <p>reward\u9664\u4e86format reward\u548cIoU\u4f5c\u4e3a\u90e8\u5206\u7684segmentation reward\u4e4b\u5916\uff0c\u8fd8\u91c7\u7528S-measure\u4f5c\u4e3a\u53e6\u5916\u4e00\u90e8\u5206\u7684segmentation reward</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/#sft","title":"SFT","text":"<p>\u63d0\u51fa\u4e86\u4e00\u4e2a\u6570\u636e\u96c6FCoT, \u4eba\u7c7b\u6807\u6ce81500\u56fe\u7247\uff0c\u8bb0\u5f55\u6807\u6ce8\u65f6\u5019\u7684bbox points labels\uff0c\u7136\u540e\u7528gemini\u52a0\u4e86reasoning process</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/#experiments","title":"Experiments","text":"<p>\u5148SFT\u518dRL\u4ee5\u53capure RL\u5206\u522b\u8bd5\u9a8c\uff0c\u5728foreground segmentation \u548c referring/reasoning segmentation\u4e0a\u5206\u522b\u8bc4\u4f30.\u8fd9\u91cc\u653e\u4e00\u4e0brs\u7684\u7ed3\u679c </p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-Seg-R1/#conclusion","title":"Conclusion","text":"<p>\u672c\u7bc7\u6587\u7ae0\u63a2\u7d22\u4e86RL\u5728segmentation\u7684\u4f5c\u7528\uff0c\u4e3b\u8981\u505aforeground segmentation\u4f46\u662f\u5728referring segmentation\u4e0a\u8868\u73b0\u5c1a\u53ef\u3002\u53e6\u5916\u672c\u6587\u91c7\u7528\u4e86SFT\u4f5c\u4e3acold start\u80fd\u8ba9\u6a21\u578b\u5148\u5b66\u4f1aformat\u4e4b\u7c7b\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u672c\u7bc7\u5de5\u4f5c\u8ba9\u5927\u6a21\u578b\u7ed9sam2\u7684prompt\u5f62\u5f0f\u5305\u62ecmask prompt\uff0c\u8fd9\u4e00\u70b9\u4f7f\u5f97SFT\u7684\u4f5c\u7528\u5927\u5927\u589e\u52a0.</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/","title":"\u8bba\u6587\u7cbe\u8bfb-SegAgent","text":"<p>\u8bba\u6587\u94fe\u63a5\uff1a</p> <ul> <li>arXiv: https://arxiv.org/abs/2503.08625</li> </ul>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#formulation","title":"Formulation","text":"<p>\u5b9a\u4e49\u4e00\u4e2aMDP \\(\\left(\\textit{S}, \\textit{A}, \\textit{R}, \\textit{T}, \\gamma \\right)\\)\uff1a</p> <ul> <li>\u72b6\u6001\u7a7a\u95f4: \\(s_t \\in \\textit{S}, s_t = \\left(M_t, a_{0:t-1}\\right)\\)\uff0c\u5176\u4e2d \\(M_t\\) \u8868\u793a\u65f6\u95f4\u6b65 \\(t\\) \u7684mask</li> <li>\u52a8\u4f5c\u7a7a\u95f4: \\(a_t = (\\alpha_t, c_t) \\in \\textit{A}\\)\uff0c\u5176\u4e2d \\(\\alpha_t \\in \\{+1, -1\\}\\)\uff0c\\(c_t \\in [0, 1]^2\\)\uff0c\u8868\u793a\u5728\u7279\u5b9a\u5750\u6807\u7684\u6b63/\u8d1f\u70b9</li> <li>\u8f6c\u79fb\u51fd\u6570: \\(\\textit{T} : \\textit{S} \\times \\textit{A} \\rightarrow \\textit{S}\\)\uff0c\u6620\u5c04\u4e3a \\(M_{t+1} = F_{iter}\\left(I, s_t, a_t\\right)\\)\uff0c\u5176\u4e2d \\(s_{t+1} = (M_{t+1}, a_{0:t})\\)</li> <li>\u5956\u52b1\u51fd\u6570: \\(\\textit{R} : \\textit{S} \\rightarrow \\mathbb{R}\\)\uff0c\u5177\u4f53\u4e3a \\(R(s_t) = IoU(M_t, M_{target})\\)</li> </ul> <p>\u76ee\u6807\uff1a \u8bad\u7ec3\u4e00\u4e2a\u7b56\u7565 \\(\\pi_{\\theta} \\left(a_t | s_t, \\text{Image}, \\text{Prompt}\\right)\\) \u6700\u5927\u5316\u6700\u7ec8\u6b65\u5956\u52b1\u671f\u671b \\(R(s_T)\\)\uff08\u6700\u7ec8mask\u8d28\u91cf\uff09\uff0c\u56e0\u6b64\u5ffd\u7565 \\(\\gamma\\)\u3002</p> <p>\u8fdb\u4e00\u6b65\u5730\uff0c\u5728mask refinement\u8fd9\u6837\u7684\u573a\u666f\u6211\u4eec\u5e38\u5e38\u4e0d\u77e5\u9053\u4e4b\u524d\u7684points\uff0c\u56e0\u6b64\u7b56\u7565\u8fdb\u4e00\u6b65\u7b80\u5316\u6210 \\(\\pi_{\\theta} \\left(a_t | M_t, I, P\\right)\\)\u3002</p> <p></p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#data-generation","title":"Data Generation","text":"<p>\u4e3a\u4e86\u4f7f\u7528StaR\u4f18\u5316\u7b97\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u7cfb\u5217\u6807\u6ce8\u7684\u8f68\u8ff9\u3002</p> <p>\u73b0\u6709\u6570\u636e\uff1a referring segmentation\u6570\u636e\u96c6 \\(D_{seg} = \\{(I, M_{target}, P) \\}\\)</p> <p>\u76ee\u6807\u6570\u636e\uff1a \u6807\u6ce8\u8f68\u8ff9\u6570\u636e\u96c6 \\(D_{traj} = \\{(I, M_{target}, P, [s_0, a_0, \\cdots, s_T, a_T])\\}\\)</p> <p>\u7b97\u6cd5\u5982\u4e0b\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5728FN\u548cFP region\u7684\u4e2d\u95f4\u5206\u522b\u70b9positive point\u548cnegative point\uff0c\u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a \\(F_{sim}\\)\u3002</p> <p></p> <p>\u4e09\u4e2a\u539f\u5219\uff1a</p> <p></p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#policy-improvement","title":"Policy Improvement","text":"<p>\u8fd9\u4e2a\u7b97\u6cd5\u548c\u539f\u6765\u7684StaR\u7b97\u6cd5\u6709\u4e24\u4e2a\u533a\u522b\uff08\u4fee\u6539\u57fa\u4e8eassuming \\(F_{sim}\\) \u76f8\u5bf9\u8f83\u4f18\uff09\uff1a</p> <ol> <li>\u539f\u6765\u7684\u7b97\u6cd5\u901a\u8fc7overall correctness filter\u8f68\u8ff9\uff0c\u800c\u8fd9\u4e2a\u7b97\u6cd5\u5728filter\u73af\u8282\u91c7\u53d6\uff1a\u4fdd\u7559\u589e\u52a0reward\u7684action\uff0c\u5bf9\u4e8e\u51cf\u5c11reward\u7684action\uff0c\u6362\u6210 \\(F_{sim}\\) \u5bf9\u5e94\u7684action</li> <li>\u6bcf\u6b21\u8bad\u7ec3\u6a21\u578b\u4f7f\u7528\u7684\u6570\u636e\u662f\u5f53\u524d\u4f18\u5316\u7684\u6570\u636e\u548c\u6700\u521d\u7684\u6570\u636e\u7684\u5e76\uff0c\u800c\u975e\u5355\u7eaf\u662f\u66f4\u65b0\u7684\u6570\u636e</li> </ol>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#process-reward-model","title":"Process Reward Model","text":"<p>Inference\u73af\u8282\u4f7f\u7528PRM\uff0c\u8fd9\u4e2aPRM\u5c31\u662f\u5927\u6a21\u578b\uff0c\u5728\u8f93\u51fa\u5750\u6807\u4e4b\u5916\uff0c\u8fd8\u8ba9\u4ed6\u8f93\u51fa\u5f53\u524d\u7684mIOU\uff0c\u6bcf\u4e00\u6b65K\u4e2acandidate action\u91cc\u9762\u8d2a\u5fc3\u9009\u62e9\u6700\u4f73\u7684\uff0c\u8fed\u4ee3T\u6b65\u3002</p> <p></p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#experiments","title":"Experiments","text":"<p>\u4f5c\u8005\u8ba4\u4e3aRefCOCO\u7cfb\u5217\u8d28\u91cf\u4e0d\u9ad8\uff08GT mask\u8d28\u91cf\u4e0d\u9ad8/expression\u7b80\u5355/\u4e0d\u8981\u591a\u6b65\u6807\u6ce8/\u573a\u666f\u7b80\u5355\uff09\uff0c\u56e0\u6b64\u91cd\u65b0\u4ece\u5df2\u6709\u6570\u636e\u96c6\u91cc\u6536\u96c6\u4e86High-quality RES\u6570\u636e\u96c6\uff0c\u5e76\u8bc1\u660e\u8fd9\u4e2aHRES\u66f4\u9002\u5408\u8fd9\u4e2asetting\u3002</p> <p>\u5b9e\u9a8c\u7ed3\u679c\uff1a</p> <ul> <li>\u5728RefCOCO\u4e0a\u63d0\u4e861\u4e2a\u70b9\u5de6\u53f3\uff08\u5bf9\u6bd4SOTA\uff09</li> <li>\u5728\u6536\u96c6\u7684HRES\u6570\u636e\u96c6\u4e0a\u63d0\u534710+\uff08\u53ea\u505a\u4e86\u81ea\u8eab\u91c7\u7528\u4e4b\u524d\u4e24\u4e2a\u7b97\u6cd5\u7684\u6d88\u878d\u5b9e\u9a8c\uff09</li> </ul> <p>\u6ce8\u610f\uff1a \u91c7\u7528\u4e86\u54ea\u4e9b\u6570\u636e\u751f\u6210\u8f68\u8ff9\u7b49\u8bad\u7ec3\u7ec6\u8282\u6ca1\u6709\u8bf4\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#videosegagent","title":"VideoSegAgent","text":"<p>\u5982\u679c\u8981\u505avideo\u7248\u672c\u7684\uff1a</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#pros","title":"Pros","text":"<ol> <li>\u4ee5\u4eba\u6807\u6ce8\u7684\u7ecf\u9a8c\u6765\u770b\uff0c\u6807video\u65f6\u5f88\u96be\u7b80\u5355\u4e00\u6b21\u6027\u641e\u5b9a\uff0c\u4f18\u5316\u7b97\u6cd5\u6709\u53d1\u6325\u7684\u7a7a\u95f4</li> </ol>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#cons","title":"Cons","text":"<ol> <li> <p>\u8fd9\u4e2aimage\u7684SegAgent\u4e8b\u5b9e\u4e0a\u53ef\u590d\u73b0\u6027\u662f\u6bd4\u8f83\u5dee\u7684\uff0c\u6700\u5173\u952e\u7684data generation\u548ctrain\u7684\u7ec6\u8282\u5f88\u591a\u9057\u6f0f</p> </li> <li> <p>\u96be\u4ee5\u5c06\u6574\u4e2a\u6d41\u7a0b\u5b8c\u5168\u590d\u5236\u8fc7\u6765\uff1a</p> </li> <li> <p>\u5f15\u5165\u65f6\u95f4\u7ef4\u5ea6\uff0c\\(F_{sim}\\) \u96be\u4ee5\u8bbe\u8ba1</p> </li> <li> <p>MLLM\u7a97\u53e3\u95ee\u9898\uff0cMLLM spatial-temporal grounding\u7684\u80fd\u529b\u591f\u4e0d\u591f\u8f93\u51fa(x, y, t)\u7684\u5750\u6807\uff08\u8fd9\u4e2a\u53ef\u4ee5\u4f18\u5316\uff0c\u6bd4\u5982\u7528frame tokens\u7684last hidden states\u6295\u5f71\u4e00\u4e2a\u5206\u5e03softmax\u5230t\uff0c\u6216\u8005\u5f15\u5165special tokens\uff09</p> </li> <li> <p>\u8fd9\u4e2a\u505a\u6cd5\u5f88\u5927\u7684\u7f3a\u70b9\u662f\u4e0d\u53ef\u64a4\u9500\uff0c\u4eba\u7c7b\u6807\u6ce8\u7684\u7ecf\u9a8c\u6765\u8bf4\uff0cvideo\u4e0a\u4e0d\u8ba9\u6211\u64a4\u9500\u662f\u6bd4\u8f83\u96be\u6807\u7684</p> </li> </ol>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegAgent/#ideas","title":"Ideas","text":"<ol> <li> <p>\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u522b\u7684\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u89c4\u907f \\(F_{sim}\\) \u96be\u4ee5\u8bbe\u8ba1\u7684\u95ee\u9898\uff08\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898sparse reward\uff08\u5373\u53ea\u5173\u5fc3\u6700\u540e\u7684mask\uff09\u7684\u7279\u6027\uff1f\uff09</p> </li> <li> <p>\u6839\u636e\u4eba\u7c7b\u6807\u6ce8\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u6216\u8bb8\u53ef\u4ee5\u5148\u4fdd\u8bc1\u67d0\u5f20image\u6700\u4f18\uff0c\u518d\u8003\u8651\u65f6\u95f4\u7ef4\u5ea6\u7684two-stage\u505a\u6cd5</p> </li> <li> <p>\u63a8\u7406\u65f6\u6211\u4eec\u7684PRM\u53ef\u4ee5\u91c7\u7528Describe Anything Model</p> </li> </ol>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegZero/","title":"\u8bba\u6587\u7cbe\u8bfb-SegAgent","text":"<p>\u8bba\u6587\u94fe\u63a5\uff1a</p> <p>https://arxiv.org/pdf/2503.06520</p> <p>\u7528RL\u505asegmentation\u4e2d\u6bd4\u8f83\u6709impact\u7684\u5de5\u4f5c\u3002</p>"},{"location":"section3/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB-SegZero/#method","title":"Method","text":"<p>\u6a21\u578b\u8f93\u5165\u8f93\u51fa\u4ee5\u53carewards\u5982\u4e0b</p> <p></p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4ed6\u8ba1\u7b97\u4e86ground truth\u7684bbox\u4ee5\u53capoints\uff0c\u4ece\u800c\u6709\u6570\u636e\u8fdb\u884cSFT\u3002</p>"},{"location":"section4/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"section4/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"section4/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}